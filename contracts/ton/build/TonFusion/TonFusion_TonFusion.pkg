{"name":"TonFusion","code":"","abi":"{\"name\":\"TonFusion\",\"types\":[{\"name\":\"DataSize\",\"header\":null,\"fields\":[{\"name\":\"cells\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"bits\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"refs\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},{\"name\":\"SignedBundle\",\"header\":null,\"fields\":[{\"name\":\"signature\",\"type\":{\"kind\":\"simple\",\"type\":\"fixed-bytes\",\"optional\":false,\"format\":64}},{\"name\":\"signedData\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false,\"format\":\"remainder\"}}]},{\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounceable\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},{\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"MessageParameters\",\"header\":null,\"fields\":[{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"DeployParameters\",\"header\":null,\"fields\":[{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"init\",\"type\":{\"kind\":\"simple\",\"type\":\"StateInit\",\"optional\":false}}]},{\"name\":\"StdAddress\",\"header\":null,\"fields\":[{\"name\":\"workchain\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":8}},{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"VarAddress\",\"header\":null,\"fields\":[{\"name\":\"workchain\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":32}},{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},{\"name\":\"BasechainAddress\",\"header\":null,\"fields\":[{\"name\":\"hash\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}}]},{\"name\":\"Deploy\",\"header\":2490013878,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},{\"name\":\"DeployOk\",\"header\":2952335191,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},{\"name\":\"FactoryDeploy\",\"header\":1829761339,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"cashback\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},{\"name\":\"LockJetton\",\"header\":4111661023,\"fields\":[{\"name\":\"orderConfig\",\"type\":{\"kind\":\"simple\",\"type\":\"OrderConfig\",\"optional\":false}},{\"name\":\"jetton\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"CreateOrder\",\"header\":1935855772,\"fields\":[{\"name\":\"orderConfig\",\"type\":{\"kind\":\"simple\",\"type\":\"Order\",\"optional\":false}},{\"name\":\"jetton\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"CreateEVMToTONOrder\",\"header\":2335447074,\"fields\":[{\"name\":\"orderConfig\",\"type\":{\"kind\":\"simple\",\"type\":\"OrderConfig\",\"optional\":false}},{\"name\":\"evmContractAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"CreateTONToEVMOrder\",\"header\":1646500216,\"fields\":[{\"name\":\"orderConfig\",\"type\":{\"kind\":\"simple\",\"type\":\"OrderConfig\",\"optional\":false}},{\"name\":\"evmContractAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"PartialFill\",\"header\":1324731174,\"fields\":[{\"name\":\"orderHash\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"secret\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"fillAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"resolver\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"CompletePartialFill\",\"header\":2054917277,\"fields\":[{\"name\":\"orderHash\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"secret\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"EVMCrossChainMessage\",\"header\":2592832621,\"fields\":[{\"name\":\"targetChainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"targetContract\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"functionSelector\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"parameters\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"gasLimit\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"EVMContractDeploy\",\"header\":1582251308,\"fields\":[{\"name\":\"targetChainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"contractBytecode\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"constructorParams\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"gasLimit\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"EVMBridgeConfirmation\",\"header\":523124044,\"fields\":[{\"name\":\"bridgeId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"transactionHash\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"blockNumber\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"confirmations\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"EVMOraclePriceUpdate\",\"header\":2359103007,\"fields\":[{\"name\":\"oracleId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"tokenAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"price\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"timestamp\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"EVMChainValidation\",\"header\":759058266,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"blockNumber\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"gasPrice\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"DeployEscrow\",\"header\":1499400124,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"targetAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"EscrowDeployed\",\"header\":2078119902,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"contractAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"success\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"RegisterRelayer\",\"header\":1935855774,\"fields\":[{\"name\":\"relayer\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"UpdateRelayerStats\",\"header\":1935855775,\"fields\":[{\"name\":\"relayer\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"success\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"GetFund\",\"header\":1348689874,\"fields\":[{\"name\":\"secret\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"hash\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"Refund\",\"header\":3835567563,\"fields\":[{\"name\":\"hash\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"RefundOrder\",\"header\":1935855773,\"fields\":[{\"name\":\"hash\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"SetWhiteList\",\"header\":2844130808,\"fields\":[{\"name\":\"resolver\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"whitelistStatus\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"JettonNotifyWithActionRequest\",\"header\":1935855772,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"amount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"actionOpcode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"actionPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"GetWalletAddress\",\"header\":801842850,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"owner\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}}]},{\"name\":\"RegisterEVMBridge\",\"header\":2325416989,\"fields\":[{\"name\":\"bridgeId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"sourceChainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"targetChainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"bridgeContract\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"bridgeFee\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"minTransferAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"maxTransferAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"UpdateEVMBridge\",\"header\":2601262382,\"fields\":[{\"name\":\"bridgeId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"bridgeFee\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"minTransferAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"maxTransferAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"RegisterEVMOracle\",\"header\":203238975,\"fields\":[{\"name\":\"oracleId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"oracleContract\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"tokenAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"priceDecimals\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"heartbeatInterval\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"UpdateEVMOracle\",\"header\":489570122,\"fields\":[{\"name\":\"oracleId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"heartbeatInterval\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"EVMBridgeTimeout\",\"header\":775899739,\"fields\":[{\"name\":\"bridgeId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"transactionNonce\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"RetryEVMTransaction\",\"header\":1061837676,\"fields\":[{\"name\":\"transactionNonce\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"newGasPrice\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}}]},{\"name\":\"CalculateOutput\",\"header\":null,\"fields\":[{\"name\":\"protocolFeeAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"integratorFeeAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"outputAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},{\"name\":\"PointAndTimeDelta\",\"header\":null,\"fields\":[{\"name\":\"rateBump\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":16}},{\"name\":\"timeDelta\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":16}}]},{\"name\":\"OrderConfig\",\"header\":null,\"fields\":[{\"name\":\"id\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"srcJettonAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"senderPubKey\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"receiverPubKey\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"hashlock\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"timelock\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"amount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"finalized\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"partialFills\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":256,\"value\":\"uint\",\"valueFormat\":64}},{\"name\":\"totalFilled\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"direction\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}}]},{\"name\":\"Order\",\"header\":null,\"fields\":[{\"name\":\"id\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"srcJettonAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"senderPubKey\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"hashlock\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"timelock\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"amount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"finalized\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"partialFills\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":256,\"value\":\"uint\",\"valueFormat\":64}},{\"name\":\"totalFilled\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"direction\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}}]},{\"name\":\"EscrowContract\",\"header\":null,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"contractAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"deployed\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"totalOrders\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}}]},{\"name\":\"RelayerData\",\"header\":null,\"fields\":[{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"whitelisted\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"totalResolves\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"successRate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":16}}]},{\"name\":\"JettonWalletData\",\"header\":null,\"fields\":[{\"name\":\"balance\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"ownerAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"jettonMasterAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"jettonWalletCode\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"EVMChainConfig\",\"header\":null,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"rpcEndpoint\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"blockTime\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"gasLimit\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"bridgeAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"oracleAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"EVMTransaction\",\"header\":null,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"toContract\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"functionSelector\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"parameters\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"gasLimit\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"gasPrice\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"nonce\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"status\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"transactionHash\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"blockNumber\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"confirmations\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}}]},{\"name\":\"EVMBridgeData\",\"header\":null,\"fields\":[{\"name\":\"bridgeId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"sourceChainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"targetChainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"bridgeContract\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"bridgeFee\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"minTransferAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"maxTransferAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"lastUpdateTimestamp\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}}]},{\"name\":\"EVMOracleData\",\"header\":null,\"fields\":[{\"name\":\"oracleId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"oracleContract\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"tokenAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"priceDecimals\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"heartbeatInterval\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"lastPriceUpdate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}}]},{\"name\":\"CrossChainMessage\",\"header\":null,\"fields\":[{\"name\":\"sourceChain\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"targetChain\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"orderHash\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"amount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"secret\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}},{\"name\":\"timestamp\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"nonce\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},{\"name\":\"ValidationResult\",\"header\":null,\"fields\":[{\"name\":\"isValid\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"errorCode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"errorMessage\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isEscrowDeployed\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"isChainConnected\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"EscrowValidationResult\",\"header\":null,\"fields\":[{\"name\":\"isDeployed\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"contractAddress\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"totalOrders\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"errorCode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"errorMessage\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"ChainConnectivityStatus\",\"header\":null,\"fields\":[{\"name\":\"chainId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isConnected\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"lastPingTimestamp\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"responseTime\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"errorCount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"BridgeStatus\",\"header\":null,\"fields\":[{\"name\":\"isActive\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"lastHeartbeat\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"failureCount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"totalTransactions\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"successRate\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}}]},{\"name\":\"RetryResult\",\"header\":null,\"fields\":[{\"name\":\"shouldRetry\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"delaySeconds\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"errorCode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"reason\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}}]},{\"name\":\"TimeoutResult\",\"header\":null,\"fields\":[{\"name\":\"hasTimeout\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"timeoutType\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"severity\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"actions\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"timeRemaining\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}}]},{\"name\":\"CircuitBreakerResult\",\"header\":null,\"fields\":[{\"name\":\"state\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"failureCount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"lastFailureTime\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"resetTime\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}}]},{\"name\":\"EVMErrorResult\",\"header\":null,\"fields\":[{\"name\":\"errorCode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"category\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"gasUsageRatio\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"recoveryActions\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"isRetryable\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"estimatedCost\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]},{\"name\":\"ErrorReport\",\"header\":null,\"fields\":[{\"name\":\"errorCode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"category\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"severity\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"timestamp\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"transactionId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"context\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"recommendedActions\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"isRetryable\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"BridgeFailureTracking\",\"header\":null,\"fields\":[{\"name\":\"bridgeId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"failureCount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"lastFailureTime\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"lastFailureCode\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"recoveryAttempts\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"isInRecovery\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"circuitBreakerState\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}}]},{\"name\":\"OrderTimeoutTracking\",\"header\":null,\"fields\":[{\"name\":\"orderId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"timelock\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"bridgeTimeout\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"lastCheckTime\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"timeoutStatus\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"escalationLevel\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"notifiedParties\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"RetryConfig\",\"header\":null,\"fields\":[{\"name\":\"maxRetries\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"baseDelay\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"maxDelay\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"backoffMultiplier\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"jitterPercentage\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":8}},{\"name\":\"retryableErrors\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"SendViaJettonTransfer\",\"header\":260734629,\"fields\":[{\"name\":\"queryId\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"amount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"destination\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"responseDestination\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":true}},{\"name\":\"customPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"forwardTonAmount\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":\"coins\"}},{\"name\":\"forwardPayload\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false,\"format\":\"remainder\"}}]},{\"name\":\"TonFusion$Data\",\"header\":null,\"fields\":[{\"name\":\"owner\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"escrowLock\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":256,\"value\":\"OrderConfig\",\"valueFormat\":\"ref\"}},{\"name\":\"escrowOrder\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":256,\"value\":\"Order\",\"valueFormat\":\"ref\"}},{\"name\":\"jettons\",\"type\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"cell\",\"valueFormat\":\"ref\"}},{\"name\":\"jettonAccount\",\"type\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"address\"}},{\"name\":\"whiteLists\",\"type\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"bool\"}},{\"name\":\"relayers\",\"type\":{\"kind\":\"dict\",\"key\":\"address\",\"value\":\"RelayerData\",\"valueFormat\":\"ref\"}},{\"name\":\"escrowContracts\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":32,\"value\":\"EscrowContract\",\"valueFormat\":\"ref\"}},{\"name\":\"totalOrders\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"totalVolume\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"totalResolves\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":32}},{\"name\":\"evmChainConfigs\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":32,\"value\":\"EVMChainConfig\",\"valueFormat\":\"ref\"}},{\"name\":\"evmTransactions\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":64,\"value\":\"EVMTransaction\",\"valueFormat\":\"ref\"}},{\"name\":\"evmBridges\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":32,\"value\":\"EVMBridgeData\",\"valueFormat\":\"ref\"}},{\"name\":\"evmOracles\",\"type\":{\"kind\":\"dict\",\"key\":\"uint\",\"keyFormat\":32,\"value\":\"EVMOracleData\",\"valueFormat\":\"ref\"}},{\"name\":\"evmTransactionNonce\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}},{\"name\":\"evmBridgeFees\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":64}}]}],\"receivers\":[{\"receiver\":\"internal\",\"message\":{\"kind\":\"empty\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"SetWhiteList\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"RegisterRelayer\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"JettonNotifyWithActionRequest\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"EVMCrossChainMessage\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"EVMContractDeploy\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"EVMBridgeConfirmation\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"EVMOraclePriceUpdate\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"EVMChainValidation\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"GetFund\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"Refund\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"RefundOrder\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"PartialFill\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CompletePartialFill\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"DeployEscrow\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"UpdateRelayerStats\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CreateEVMToTONOrder\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"CreateTONToEVMOrder\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"RegisterEVMBridge\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"UpdateEVMBridge\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"RegisterEVMOracle\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"UpdateEVMOracle\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"EVMBridgeTimeout\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"RetryEVMTransaction\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"typed\",\"type\":\"Deploy\"}}],\"getters\":[],\"errors\":{\"2\":{\"message\":\"Stack underflow\"},\"3\":{\"message\":\"Stack overflow\"},\"4\":{\"message\":\"Integer overflow\"},\"5\":{\"message\":\"Integer out of expected range\"},\"6\":{\"message\":\"Invalid opcode\"},\"7\":{\"message\":\"Type check error\"},\"8\":{\"message\":\"Cell overflow\"},\"9\":{\"message\":\"Cell underflow\"},\"10\":{\"message\":\"Dictionary error\"},\"11\":{\"message\":\"'Unknown' error\"},\"12\":{\"message\":\"Fatal error\"},\"13\":{\"message\":\"Out of gas error\"},\"14\":{\"message\":\"Virtualization error\"},\"32\":{\"message\":\"Action list is invalid\"},\"33\":{\"message\":\"Action list is too long\"},\"34\":{\"message\":\"Action is invalid or not supported\"},\"35\":{\"message\":\"Invalid source address in outbound message\"},\"36\":{\"message\":\"Invalid destination address in outbound message\"},\"37\":{\"message\":\"Not enough Toncoin\"},\"38\":{\"message\":\"Not enough extra currencies\"},\"39\":{\"message\":\"Outbound message does not fit into a cell after rewriting\"},\"40\":{\"message\":\"Cannot process a message\"},\"41\":{\"message\":\"Library reference is null\"},\"42\":{\"message\":\"Library change action error\"},\"43\":{\"message\":\"Exceeded maximum number of cells in the library or the maximum depth of the Merkle tree\"},\"50\":{\"message\":\"Account state size exceeded limits\"},\"128\":{\"message\":\"Null reference exception\"},\"129\":{\"message\":\"Invalid serialization prefix\"},\"130\":{\"message\":\"Invalid incoming message\"},\"131\":{\"message\":\"Constraints error\"},\"132\":{\"message\":\"Access denied\"},\"133\":{\"message\":\"Contract stopped\"},\"134\":{\"message\":\"Invalid argument\"},\"135\":{\"message\":\"Code of a contract was not found\"},\"136\":{\"message\":\"Invalid standard address\"},\"138\":{\"message\":\"Not a basechain address\"}},\"interfaces\":[\"org.ton.introspection.v0\",\"org.ton.abi.ipfs.v0\",\"org.ton.deploy.lazy.v0\"]}","init":{"kind":"direct","args":[],"prefix":{"bits":1,"value":0},"deployment":{"kind":"system-cell","system":null}},"sources":{"contracts/messages.tact":"","contracts/errors.tact":"","contracts/states.tact":"","contracts/consts.tact":"LyoqCiAqIEB0aXRsZSBUb25GdXNpb24gQ29uc3RhbnRzCiAqIEBhdXRob3IgVG9uRnVzaW9uIFRlYW0KICogQG5vdGljZSBNYXRoZW1hdGljYWwgY29uc3RhbnRzIGFuZCBiYXNlIHZhbHVlcyBmb3IgdGhlIFRvbkZ1c2lvbiBIVExDIHByb3RvY29sCiAqIEBkZXYgUHJvdmlkZXMgc3RhbmRhcmRpemVkIGJhc2UgdmFsdWVzIHVzZWQgdGhyb3VnaG91dCB0aGUgcHJvdG9jb2wKICogCiAqIEBjdXN0b206dmVyc2lvbiAxLjAuMAogKiAKICogQ29uc3RhbnQgQ2F0ZWdvcmllczoKICogLSBNYXRoZW1hdGljYWwgYmFzZSB2YWx1ZXMKICogLSBQcmVjaXNpb24gY29uc3RhbnRzCiAqIC0gU2NhbGluZyBmYWN0b3JzCiAqIC0gRVZNIGNoYWluIGNvbnN0YW50cwogKiAtIFZhbGlkYXRpb24gY29uc3RhbnRzCiAqLwoKLyoqCiAqIEBub3RpY2UgQmFzZSB2YWx1ZSBmb3IgMWUyICgxMDApCiAqIEBkZXYgVXNlZCBmb3IgcGVyY2VudGFnZSBjYWxjdWxhdGlvbnMgYW5kIHNjYWxpbmcKICogQGN1c3RvbTppbnRlcm5hbCBVc2VkIGludGVybmFsbHkgZm9yIG1hdGhlbWF0aWNhbCBvcGVyYXRpb25zCiAqLwpjb25zdCBCQVNFXzFFMjogSW50ID0gMTAwOwoKLyoqCiAqIEBub3RpY2UgQmFzZSB2YWx1ZSBmb3IgMWUzICgxMDAwKQogKiBAZGV2IFVzZWQgZm9yIGZlZSBjYWxjdWxhdGlvbnMgYW5kIHNjYWxpbmcKICogQGN1c3RvbTppbnRlcm5hbCBVc2VkIGludGVybmFsbHkgZm9yIG1hdGhlbWF0aWNhbCBvcGVyYXRpb25zCiAqLwpjb25zdCBCQVNFXzFFMzogSW50ID0gMTAwMDsKCi8qKgogKiBAbm90aWNlIEJhc2UgdmFsdWUgZm9yIDFlNSAoMTAwLDAwMCkKICogQGRldiBVc2VkIGZvciBwcmVjaXNpb24gY2FsY3VsYXRpb25zIGFuZCBsYXJnZSBudW1iZXIgc2NhbGluZwogKiBAY3VzdG9tOmludGVybmFsIFVzZWQgaW50ZXJuYWxseSBmb3IgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMKICovCmNvbnN0IEJBU0VfMUU1OiBJbnQgPSAxMDBfMDAwOwoKLyoqCiAqIEBub3RpY2UgRVZNIENoYWluIElEcyBmb3Igc3VwcG9ydGVkIG5ldHdvcmtzCiAqIEBkZXYgVXNlZCBmb3IgY2hhaW4gdmFsaWRhdGlvbiBhbmQgcm91dGluZwogKiBAY3VzdG9tOnNlY3VyaXR5IE9ubHkgc3VwcG9ydGVkIGNoYWlucyBhcmUgYWxsb3dlZAogKi8KY29uc3QgRVZNX0NIQUlOX0VUSEVSRVVNOiBJbnQgPSAxOwpjb25zdCBFVk1fQ0hBSU5fUE9MWUdPTjogSW50ID0gMTM3Owpjb25zdCBFVk1fQ0hBSU5fQlNDOiBJbnQgPSA1NjsKY29uc3QgRVZNX0NIQUlOX0JBU0U6IEludCA9IDg0NTM7CmNvbnN0IEVWTV9DSEFJTl9BUkJJVFJVTTogSW50ID0gNDIxNjE7CgovKioKICogQG5vdGljZSBUT04gQ2hhaW4gSURzCiAqIEBkZXYgVXNlZCBmb3IgY2hhaW4gdmFsaWRhdGlvbiBhbmQgcm91dGluZwogKiBAY3VzdG9tOnNlY3VyaXR5IE9ubHkgc3VwcG9ydGVkIGNoYWlucyBhcmUgYWxsb3dlZAogKi8KY29uc3QgVE9OX0NIQUlOX01BSU5ORVQ6IEludCA9IC0zOwpjb25zdCBUT05fQ0hBSU5fVEVTVE5FVDogSW50ID0gLTIzOTsKCi8qKgogKiBAbm90aWNlIFN3YXAgZGlyZWN0aW9uIGNvbnN0YW50cwogKiBAZGV2IFVzZWQgZm9yIGRldGVybWluaW5nIHN3YXAgdHlwZSBhbmQgcm91dGluZwogKiBAY3VzdG9tOmludGVybmFsIFVzZWQgZm9yIG9yZGVyIGRpcmVjdGlvbiBkZXRlcm1pbmF0aW9uCiAqLwpjb25zdCBTV0FQX0RJUkVDVElPTl9UT05fVE9fRVZNOiBJbnQgPSAwOwpjb25zdCBTV0FQX0RJUkVDVElPTl9FVk1fVE9fVE9OOiBJbnQgPSAxOwpjb25zdCBTV0FQX0RJUkVDVElPTl9UT05fVE9fVE9OOiBJbnQgPSAyOwoKLyoqCiAqIEBub3RpY2UgRVZNIGludGVncmF0aW9uIGNvbnN0YW50cwogKiBAZGV2IFVzZWQgZm9yIGNyb3NzLWNoYWluIG1lc3NhZ2UgaGFuZGxpbmcgYW5kIHZhbGlkYXRpb24KICogQGN1c3RvbTppbnRlcm5hbCBVc2VkIGZvciBFVk0gY29udHJhY3QgaW50ZXJhY3Rpb25zCiAqLwpjb25zdCBFVk1fTUVTU0FHRV9PUENPREU6IEludCA9IDB4MTIzNDU2Nzg7CmNvbnN0IEVWTV9DT05UUkFDVF9DQUxMX0dBU19MSU1JVDogSW50ID0gMzAwMDAwOwpjb25zdCBFVk1fQ09OVFJBQ1RfREVQTE9ZX0dBU19MSU1JVDogSW50ID0gNTAwMDAwOwpjb25zdCBFVk1fQlJJREdFX1RJTUVPVVRfU0VDT05EUzogSW50ID0gMzYwMDsgLy8gMSBob3VyCmNvbnN0IEVWTV9DT05GSVJNQVRJT05fQkxPQ0tTOiBJbnQgPSAxMjsgLy8gU3RhbmRhcmQgY29uZmlybWF0aW9uIGJsb2NrcwoKLyoqCiAqIEBub3RpY2UgRVZNIGJyaWRnZSBhbmQgcmV0cnkgY29uc3RhbnRzCiAqIEBkZXYgVXNlZCBmb3IgYnJpZGdlIGZhaWx1cmUgaGFuZGxpbmcgYW5kIHJldHJ5IGxvZ2ljCiAqIEBjdXN0b206aW50ZXJuYWwgVXNlZCBmb3IgY3Jvc3MtY2hhaW4gcmVsaWFiaWxpdHkKICovCmNvbnN0IEVWTV9NQVhfUkVUUllfQVRURU1QVFM6IEludCA9IDM7CmNvbnN0IEVWTV9SRVRSWV9ERUxBWV9TRUNPTkRTOiBJbnQgPSAzMDA7IC8vIDUgbWludXRlcwpjb25zdCBFVk1fQlJJREdFX0ZFRV9CQVNFOiBJbnQgPSB0b24oIjAuMDEiKTsgLy8gQmFzZSBicmlkZ2UgZmVlCmNvbnN0IEVWTV9HQVNfUFJJQ0VfTVVMVElQTElFUjogSW50ID0gMTEwOyAvLyAxMTAlIG9mIGJhc2UgZ2FzIHByaWNlCgovKioKICogQG5vdGljZSBDaXJjdWl0IGJyZWFrZXIgY29uc3RhbnRzCiAqIEBkZXYgVXNlZCBmb3IgY2lyY3VpdCBicmVha2VyIGltcGxlbWVudGF0aW9uCiAqIEBjdXN0b206aW50ZXJuYWwgVXNlZCBmb3IgZmFpbHVyZSBwcmV2ZW50aW9uCiAqLwpjb25zdCBDSVJDVUlUX0JSRUFLRVJfRkFJTFVSRV9USFJFU0hPTEQ6IEludCA9IDU7CmNvbnN0IENJUkNVSVRfQlJFQUtFUl9SRVNFVF9USU1FT1VUOiBJbnQgPSAzNjAwOyAvLyAxIGhvdXIKY29uc3QgQ0lSQ1VJVF9CUkVBS0VSX0hBTEZfT1BFTl9USU1FT1VUOiBJbnQgPSAxODAwOyAvLyAzMCBtaW51dGVzCgovKioKICogQG5vdGljZSBUaW1lb3V0IGhhbmRsaW5nIGNvbnN0YW50cwogKiBAZGV2IFVzZWQgZm9yIHRpbWVvdXQgcHJvY2Vzc2luZyBhbmQgZXNjYWxhdGlvbgogKiBAY3VzdG9tOmludGVybmFsIFVzZWQgZm9yIHRpbWVvdXQgbWFuYWdlbWVudAogKi8KY29uc3QgVElNRU9VVF9FU0NBTEFUSU9OX1RIUkVTSE9MRDogSW50ID0gMTgwMDsgLy8gMzAgbWludXRlcwpjb25zdCBUSU1FT1VUX01BWF9FU0NBTEFUSU9OX0xFVkVMOiBJbnQgPSAzOwoKLyoqCiAqIEBub3RpY2UgR2FzIG9wdGltaXphdGlvbiBjb25zdGFudHMKICogQGRldiBVc2VkIGZvciBnYXMgZXN0aW1hdGlvbiBhbmQgb3B0aW1pemF0aW9uCiAqIEBjdXN0b206aW50ZXJuYWwgVXNlZCBmb3IgZ2FzIG1hbmFnZW1lbnQKICovCmNvbnN0IEdBU19FU1RJTUFUSU9OX0JVRkZFUjogSW50ID0gMTIwOyAvLyAxMjAlIGJ1ZmZlciBmb3IgZ2FzIGVzdGltYXRpb24KY29uc3QgR0FTX1BSSUNFX0xPV19QUklPUklUWTogSW50ID0gODA7IC8vIDgwJSBvZiBiYXNlIGdhcyBwcmljZQpjb25zdCBHQVNfUFJJQ0VfTUVESVVNX1BSSU9SSVRZOiBJbnQgPSAxMDA7IC8vIDEwMCUgb2YgYmFzZSBnYXMgcHJpY2UKY29uc3QgR0FTX1BSSUNFX0hJR0hfUFJJT1JJVFk6IEludCA9IDEyMDsgLy8gMTIwJSBvZiBiYXNlIGdhcyBwcmljZQoKLyoqCiAqIEBub3RpY2UgU2VjdXJpdHkgdmFsaWRhdGlvbiBjb25zdGFudHMKICogQGRldiBVc2VkIGZvciBzZWN1cml0eSBjaGVja3MgYW5kIHZhbGlkYXRpb24KICogQGN1c3RvbTpzZWN1cml0eSBDcml0aWNhbCBmb3IgY3Jvc3MtY2hhaW4gc2VjdXJpdHkKICovCmNvbnN0IFNFQ1VSSVRZX1RJTUVTVEFNUF9GVVRVUkVfVE9MRVJBTkNFOiBJbnQgPSAzMDA7IC8vIDUgbWludXRlcwpjb25zdCBTRUNVUklUWV9USU1FU1RBTVBfUEFTVF9UT0xFUkFOQ0U6IEludCA9IDM2MDA7IC8vIDEgaG91cgpjb25zdCBTRUNVUklUWV9NSU5fTUVTU0FHRV9TSVpFOiBJbnQgPSAyNTY7IC8vIE1pbmltdW0gbWVzc2FnZSBzaXplIGluIGJpdHMKY29uc3QgU0VDVVJJVFlfTUlOX0dBU19MSU1JVDogSW50ID0gMjEwMDA7IC8vIE1pbmltdW0gZ2FzIGxpbWl0CmNvbnN0IFNFQ1VSSVRZX01BWF9HQVNfTElNSVQ6IEludCA9IDMwMDAwMDsgLy8gTWF4aW11bSBnYXMgbGltaXQKY29uc3QgVElNRU9VVF9FU0NBTEFUSU9OX0xFVkVMXzE6IEludCA9IDE4MDA7IC8vIDMwIG1pbnV0ZXMKY29uc3QgVElNRU9VVF9FU0NBTEFUSU9OX0xFVkVMXzI6IEludCA9IDM2MDA7IC8vIDEgaG91cgpjb25zdCBUSU1FT1VUX0VTQ0FMQVRJT05fTEVWRUxfMzogSW50ID0gNzIwMDsgLy8gMiBob3VycwoKLyoqCiAqIEBub3RpY2UgR2FzIGVzdGltYXRpb24gY29uc3RhbnRzCiAqIEBkZXYgVXNlZCBmb3IgZHluYW1pYyBnYXMgY2FsY3VsYXRpb24KICogQGN1c3RvbTppbnRlcm5hbCBVc2VkIGZvciBnYXMgb3B0aW1pemF0aW9uCiAqLwpjb25zdCBHQVNfUFJJQ0VfUFJJT1JJVFlfTE9XOiBJbnQgPSAwOwpjb25zdCBHQVNfUFJJQ0VfUFJJT1JJVFlfTUVESVVNOiBJbnQgPSAxOwpjb25zdCBHQVNfUFJJQ0VfUFJJT1JJVFlfSElHSDogSW50ID0gMjsKCi8qKgogKiBAbm90aWNlIEVycm9yIGNvZGVzIGZvciBjaGFpbiB2YWxpZGF0aW9uCiAqIEBkZXYgVXNlZCBmb3IgaWRlbnRpZnlpbmcgc3BlY2lmaWMgdmFsaWRhdGlvbiBmYWlsdXJlcwogKiBAY3VzdG9tOnNlY3VyaXR5IEVycm9yIGNvZGVzIGhlbHAgaWRlbnRpZnkgdmFsaWRhdGlvbiBpc3N1ZXMKICovCi8vIE5vdGU6IFRoZXNlIGVycm9yIGNvZGVzIGFyZSBub3cgZGVmaW5lZCBpbiBlcnJvcnMudGFjdAovLyBjb25zdCBJTlZBTElEX0NIQUlOX0lEOiBJbnQgPSAxMDAxOwovLyBjb25zdCBFU0NST1dfTk9UX0RFUExPWUVEOiBJbnQgPSAxMDAyOwovLyBjb25zdCBDSEFJTl9OT1RfQUNUSVZFOiBJbnQgPSAxMDAzOwovLyBjb25zdCBDSEFJTl9OT1RfQ09OTkVDVEVEOiBJbnQgPSAxMDA0OwovLyBjb25zdCBJTlZBTElEX0VWTV9NRVNTQUdFOiBJbnQgPSAxMDA1OwovLyBjb25zdCBCUklER0VfRkFJTFVSRTogSW50ID0gMTAwNjsKLy8gY29uc3QgVElNRU9VVF9FUlJPUjogSW50ID0gMTAwNzsKCgo=","contracts/utils.tact":"","contracts/ton_fusion.tact":""},"compiler":{"name":"tact","version":"1.6.13","parameters":"{\"entrypoint\":\"contracts/ton_fusion.tact\",\"options\":{\"debug\":false,\"external\":false}}"}}