#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; TonFusion_TonFusion.headers.fc
;;
;; Header files for TonFusion
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_int_eq_nullable_left
int __tact_int_eq_nullable_left(int a, int b) inline;

;; __tact_cell_eq
int __tact_cell_eq(cell a, cell b) inline;

;; __tact_dict_get_slice_slice
slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline;

;; __tact_dict_set_slice_slice
(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_uint_uint
int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_uint_uint
(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_uint_cell
cell __tact_dict_get_uint_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $OrderConfig$_store
builder $OrderConfig$_store(builder build_0, (int, slice, slice, slice, int, int, int, int, cell, int, int) v) inline_ref;

;; $OrderConfig$_store_cell
cell $OrderConfig$_store_cell((int, slice, slice, slice, int, int, int, int, cell, int, int) v, builder b) inline;

;; $OrderConfig$_load
(slice, ((int, slice, slice, slice, int, int, int, int, cell, int, int))) $OrderConfig$_load(slice sc_0) inline_ref;

;; $OrderConfig$_as_optional
tuple $OrderConfig$_as_optional((int, slice, slice, slice, int, int, int, int, cell, int, int) v) inline;

;; $OrderConfig$_load_opt
tuple $OrderConfig$_load_opt(cell cl) inline;

;; $LockJetton$_load
(slice, (((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $LockJetton$_load(slice sc_0) impure inline;

;; $LockJetton$_load_not_mut
(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $LockJetton$_load_not_mut(slice sc_0) inline;

;; $Order$_store
builder $Order$_store(builder build_0, (int, slice, slice, int, int, int, int, cell, int, int) v) inline;

;; $Order$_store_cell
cell $Order$_store_cell((int, slice, slice, int, int, int, int, cell, int, int) v, builder b) inline;

;; $Order$_load
(slice, ((int, slice, slice, int, int, int, int, cell, int, int))) $Order$_load(slice sc_0) inline;

;; $Order$_as_optional
tuple $Order$_as_optional((int, slice, slice, int, int, int, int, cell, int, int) v) inline;

;; $Order$_load_opt
tuple $Order$_load_opt(cell cl) inline;

;; $CreateOrder$_load
(slice, (((int, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $CreateOrder$_load(slice sc_0) impure inline;

;; $CreateOrder$_load_not_mut
(((int, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $CreateOrder$_load_not_mut(slice sc_0) inline;

;; $CreateEVMToTONOrder$_store
builder $CreateEVMToTONOrder$_store(builder build_0, ((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v) inline;

;; $CreateEVMToTONOrder$_store_cell
cell $CreateEVMToTONOrder$_store_cell(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v, builder b) inline;

;; $CreateEVMToTONOrder$_load
(slice, (((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $CreateEVMToTONOrder$_load(slice sc_0) impure inline;

;; $CreateEVMToTONOrder$_load_not_mut
(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $CreateEVMToTONOrder$_load_not_mut(slice sc_0) inline;

;; $CreateTONToEVMOrder$_store
builder $CreateTONToEVMOrder$_store(builder build_0, ((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v) inline;

;; $CreateTONToEVMOrder$_store_cell
cell $CreateTONToEVMOrder$_store_cell(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v, builder b) inline;

;; $CreateTONToEVMOrder$_load
(slice, (((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $CreateTONToEVMOrder$_load(slice sc_0) impure inline;

;; $CreateTONToEVMOrder$_load_not_mut
(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $CreateTONToEVMOrder$_load_not_mut(slice sc_0) inline;

;; $EVMCrossChainMessage$_store
builder $EVMCrossChainMessage$_store(builder build_0, (int, cell, int, cell, int, int, cell) v) inline;

;; $EVMCrossChainMessage$_store_cell
cell $EVMCrossChainMessage$_store_cell((int, cell, int, cell, int, int, cell) v, builder b) inline;

;; $EVMContractDeploy$_store
builder $EVMContractDeploy$_store(builder build_0, (int, cell, cell, int, int, cell) v) inline;

;; $EVMContractDeploy$_store_cell
cell $EVMContractDeploy$_store_cell((int, cell, cell, int, int, cell) v, builder b) inline;

;; $EscrowContract$_store
builder $EscrowContract$_store(builder build_0, (int, slice, int, int) v) inline;

;; $EscrowContract$_store_cell
cell $EscrowContract$_store_cell((int, slice, int, int) v, builder b) inline;

;; $EscrowContract$_load
(slice, ((int, slice, int, int))) $EscrowContract$_load(slice sc_0) inline;

;; $EscrowContract$_as_optional
tuple $EscrowContract$_as_optional((int, slice, int, int) v) inline;

;; $EscrowContract$_load_opt
tuple $EscrowContract$_load_opt(cell cl) inline;

;; $RelayerData$_store
builder $RelayerData$_store(builder build_0, (slice, int, int, int) v) inline;

;; $RelayerData$_store_cell
cell $RelayerData$_store_cell((slice, int, int, int) v, builder b) inline;

;; $RelayerData$_load
(slice, ((slice, int, int, int))) $RelayerData$_load(slice sc_0) inline;

;; $RelayerData$_as_optional
tuple $RelayerData$_as_optional((slice, int, int, int) v) inline;

;; $RelayerData$_load_opt
tuple $RelayerData$_load_opt(cell cl) inline;

;; $JettonWalletData$_store
builder $JettonWalletData$_store(builder build_0, (int, slice, slice, cell) v) inline;

;; $JettonWalletData$_store_cell
cell $JettonWalletData$_store_cell((int, slice, slice, cell) v, builder b) inline;

;; $EVMChainConfig$_store
builder $EVMChainConfig$_store(builder build_0, (int, cell, int, int, int, cell, cell) v) inline;

;; $EVMChainConfig$_store_cell
cell $EVMChainConfig$_store_cell((int, cell, int, int, int, cell, cell) v, builder b) inline;

;; $EVMChainConfig$_load
(slice, ((int, cell, int, int, int, cell, cell))) $EVMChainConfig$_load(slice sc_0) inline;

;; $EVMChainConfig$_as_optional
tuple $EVMChainConfig$_as_optional((int, cell, int, int, int, cell, cell) v) inline;

;; $EVMChainConfig$_load_opt
tuple $EVMChainConfig$_load_opt(cell cl) inline;

;; $EVMTransaction$_store
builder $EVMTransaction$_store(builder build_0, (int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline_ref;

;; $EVMTransaction$_store_cell
cell $EVMTransaction$_store_cell((int, cell, int, cell, int, int, int, int, int, cell, int, int) v, builder b) inline;

;; $EVMTransaction$_load
(slice, ((int, cell, int, cell, int, int, int, int, int, cell, int, int))) $EVMTransaction$_load(slice sc_0) inline_ref;

;; $EVMTransaction$_as_optional
tuple $EVMTransaction$_as_optional((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_load_opt
tuple $EVMTransaction$_load_opt(cell cl) inline;

;; $EVMBridgeData$_store
builder $EVMBridgeData$_store(builder build_0, (int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_store_cell
cell $EVMBridgeData$_store_cell((int, int, int, slice, int, int, int, int, int) v, builder b) inline;

;; $EVMBridgeData$_load
(slice, ((int, int, int, slice, int, int, int, int, int))) $EVMBridgeData$_load(slice sc_0) inline;

;; $EVMBridgeData$_as_optional
tuple $EVMBridgeData$_as_optional((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_load_opt
tuple $EVMBridgeData$_load_opt(cell cl) inline;

;; $EVMOracleData$_store
builder $EVMOracleData$_store(builder build_0, (int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_store_cell
cell $EVMOracleData$_store_cell((int, int, slice, slice, int, int, int, int) v, builder b) inline;

;; $EVMOracleData$_load
(slice, ((int, int, slice, slice, int, int, int, int))) $EVMOracleData$_load(slice sc_0) inline;

;; $EVMOracleData$_as_optional
tuple $EVMOracleData$_as_optional((int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_load_opt
tuple $EVMOracleData$_load_opt(cell cl) inline;

;; $CrossChainMessage$_store
builder $CrossChainMessage$_store(builder build_0, (int, int, int, int, int, int, int) v) inline;

;; $CrossChainMessage$_store_cell
cell $CrossChainMessage$_store_cell((int, int, int, int, int, int, int) v, builder b) inline;

;; $SendViaJettonTransfer$_store
builder $SendViaJettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline;

;; $SendViaJettonTransfer$_store_cell
cell $SendViaJettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v, builder b) inline;

;; $TonFusion$_store
builder $TonFusion$_store(builder build_0, (slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) v) inline;

;; $TonFusion$_load
(slice, ((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int))) $TonFusion$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $OrderConfig$_not_null
((int, slice, slice, slice, int, int, int, int, cell, int, int)) $OrderConfig$_not_null(tuple v) inline;

;; $Order$_not_null
((int, slice, slice, int, int, int, int, cell, int, int)) $Order$_not_null(tuple v) inline;

;; $EscrowContract$_get_deployed
_ $EscrowContract$_get_deployed((int, slice, int, int) v) inline;

;; $EscrowContract$_not_null
((int, slice, int, int)) $EscrowContract$_not_null(tuple v) inline;

;; $RelayerData$_get_address
_ $RelayerData$_get_address((slice, int, int, int) v) inline;

;; $RelayerData$_get_whitelisted
_ $RelayerData$_get_whitelisted((slice, int, int, int) v) inline;

;; $RelayerData$_get_totalResolves
_ $RelayerData$_get_totalResolves((slice, int, int, int) v) inline;

;; $RelayerData$_get_successRate
_ $RelayerData$_get_successRate((slice, int, int, int) v) inline;

;; $RelayerData$_not_null
((slice, int, int, int)) $RelayerData$_not_null(tuple v) inline;

;; $EVMChainConfig$_not_null
((int, cell, int, int, int, cell, cell)) $EVMChainConfig$_not_null(tuple v) inline;

;; $EVMTransaction$_get_chainId
_ $EVMTransaction$_get_chainId((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_toContract
_ $EVMTransaction$_get_toContract((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_functionSelector
_ $EVMTransaction$_get_functionSelector((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_parameters
_ $EVMTransaction$_get_parameters((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_gasLimit
_ $EVMTransaction$_get_gasLimit((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_gasPrice
_ $EVMTransaction$_get_gasPrice((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_value
_ $EVMTransaction$_get_value((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_nonce
_ $EVMTransaction$_get_nonce((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_status
_ $EVMTransaction$_get_status((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_transactionHash
_ $EVMTransaction$_get_transactionHash((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_blockNumber
_ $EVMTransaction$_get_blockNumber((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_get_confirmations
_ $EVMTransaction$_get_confirmations((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline;

;; $EVMTransaction$_not_null
((int, cell, int, cell, int, int, int, int, int, cell, int, int)) $EVMTransaction$_not_null(tuple v) inline;

;; $EVMBridgeData$_get_sourceChainId
_ $EVMBridgeData$_get_sourceChainId((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_get_targetChainId
_ $EVMBridgeData$_get_targetChainId((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_get_bridgeContract
_ $EVMBridgeData$_get_bridgeContract((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_get_minTransferAmount
_ $EVMBridgeData$_get_minTransferAmount((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_get_maxTransferAmount
_ $EVMBridgeData$_get_maxTransferAmount((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_get_isActive
_ $EVMBridgeData$_get_isActive((int, int, int, slice, int, int, int, int, int) v) inline;

;; $EVMBridgeData$_not_null
((int, int, int, slice, int, int, int, int, int)) $EVMBridgeData$_not_null(tuple v) inline;

;; $EVMOracleData$_get_chainId
_ $EVMOracleData$_get_chainId((int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_get_oracleContract
_ $EVMOracleData$_get_oracleContract((int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_get_tokenAddress
_ $EVMOracleData$_get_tokenAddress((int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_get_priceDecimals
_ $EVMOracleData$_get_priceDecimals((int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_get_lastPriceUpdate
_ $EVMOracleData$_get_lastPriceUpdate((int, int, slice, slice, int, int, int, int) v) inline;

;; $EVMOracleData$_not_null
((int, int, slice, slice, int, int, int, int)) $EVMOracleData$_not_null(tuple v) inline;

;; $TonFusion$_contract_init
(slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $TonFusion$_contract_init() impure inline;

;; $TonFusion$_contract_load
(slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $TonFusion$_contract_load() impure inline;

;; $TonFusion$_contract_store
() $TonFusion$_contract_store((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $JettonWalletData$_constructor_balance_ownerAddress_jettonMasterAddress_jettonWalletCode
((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_ownerAddress_jettonMasterAddress_jettonWalletCode(int $balance, slice $ownerAddress, slice $jettonMasterAddress, cell $jettonWalletCode) inline;

;; $StateInit$_constructor_code_data
((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline;

;; $global_calculateJettonWalletAddress
slice $global_calculateJettonWalletAddress(slice $ownerAddress, slice $jettonMasterAddress, cell $jettonWalletCode) impure inline_ref;

;; $global_createZeroAddress
slice $global_createZeroAddress() impure inline_ref;

;; $global_keccakBytes32
int $global_keccakBytes32(int $secret) impure inline_ref;

;; $global_isValidEVMChainId
int $global_isValidEVMChainId(int $chainId) impure inline_ref;

;; $global_calculateEVMGasPrice
int $global_calculateEVMGasPrice(int $chainId) impure inline_ref;

;; $EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress
((int, cell, int, int, int, cell, cell)) $EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(int $chainId, cell $rpcEndpoint, int $blockTime, int $gasLimit, int $isActive, cell $bridgeAddress, cell $oracleAddress) inline;

;; $global_getEVMChainConfig
tuple $global_getEVMChainConfig(int $chainId) impure inline_ref;

;; $CrossChainMessage$_constructor_sourceChain_targetChain_orderHash_amount_secret_timestamp_nonce
((int, int, int, int, int, int, int)) $CrossChainMessage$_constructor_sourceChain_targetChain_orderHash_amount_secret_timestamp_nonce(int $sourceChain, int $targetChain, int $orderHash, int $amount, int $secret, int $timestamp, int $nonce) inline;

;; $global_calculateEVMBridgeFee
int $global_calculateEVMBridgeFee(int $amount, int $sourceChainId, int $targetChainId) impure inline_ref;

;; $global_priceOfJettonForward
int $global_priceOfJettonForward(int $fwdFee, int $fwdTonAmount) impure inline;

;; $global_serializeOrderConfig
cell $global_serializeOrderConfig((int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $secret) impure inline;

;; $global_serializeOrder
cell $global_serializeOrder((int, slice, slice, int, int, int, int, cell, int, int) $order, int $secret) impure inline;

;; $global_findBridgeForChain
int $global_findBridgeForChain(int $chainId) impure inline_ref;

;; $global_calculateEVMDynamicGasLimit
int $global_calculateEVMDynamicGasLimit(int $chainId, int $amount, int $isContractCall) impure inline_ref;

;; $global_createEnhancedEVMCrossChainMessage
(int, int, int, int, int, int, int) $global_createEnhancedEVMCrossChainMessage(int $targetChainId, cell $targetContract, int $functionSelector, cell $parameters, int $amount, int $value) impure inline_ref;

;; $global_validateEnhancedEVMMessageFormat
int $global_validateEnhancedEVMMessageFormat(cell $message, int $chainId) impure inline_ref;

;; $global_calculateOptimalEVMGasPrice
int $global_calculateOptimalEVMGasPrice(int $chainId, int $priority) impure inline_ref;

;; $global_sendCrossChainMessage
() $global_sendCrossChainMessage(int $chainId, cell $message, int $retryCount) impure inline_ref;

;; $global_isEscrowDeployed
int $global_isEscrowDeployed(int $chainId, cell $escrowContracts) impure inline_ref;

;; $global_buildEVMTransferMessage
cell $global_buildEVMTransferMessage((int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref;

;; $global_validateMessageAuthenticity
int $global_validateMessageAuthenticity(cell $message, int $sourceChain) impure inline_ref;

;; $global_validateMessageIntegrity
int $global_validateMessageIntegrity(cell $message) impure inline_ref;

;; $global_validateSourceChain
int $global_validateSourceChain(int $sourceChain, int $targetChain) impure inline_ref;

;; $global_validateBridgeOperator
int $global_validateBridgeOperator(slice $bridgeOperator, int $sourceChain) impure inline_ref;

;; $global_validateEnhancedMessage
int $global_validateEnhancedMessage(cell $message, int $sourceChain, int $targetChain, slice $bridgeOperator) impure inline_ref;

;; $global_validateReplayProtection
int $global_validateReplayProtection(cell $message, int $nonce, int $timestamp, cell $processedNonces) impure inline_ref;

;; $global_calculateSecureGasEstimation
int $global_calculateSecureGasEstimation(int $chainId, int $amount, int $isContractCall) impure inline_ref;

;; $global_handleGasPriceFluctuations
int $global_handleGasPriceFluctuations(int $chainId, int $baseGasPrice, int $priority) impure inline_ref;

;; $TonFusion$_fun_create
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_create((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref;

;; $TonFusion$_fun_makeOrder
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_makeOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref;

;; $TonFusion$_fun_createEVMToTONOrder
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_createEVMToTONOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref;

;; $TonFusion$_fun_createTONToEVMOrder
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_createTONToEVMOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref;

;; $RelayerData$_constructor_address_whitelisted_totalResolves_successRate
((slice, int, int, int)) $RelayerData$_constructor_address_whitelisted_totalResolves_successRate(slice $address, int $whitelisted, int $totalResolves, int $successRate) inline;

;; $TonFusion$_fun_partialFill
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_partialFill((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int, int, slice, cell) $msg) impure inline_ref;

;; $MessageParameters$_constructor_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload
((int, int, slice, slice, cell, int, slice)) $SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload(int $queryId, int $amount, slice $responseDestination, slice $destination, int $forwardTonAmount, slice $forwardPayload, cell $customPayload) inline;

;; $TonFusion$_fun_processJettonTransfer
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonTransfer((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref;

;; $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations
((int, cell, int, cell, int, int, int, int, int, cell, int, int)) $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations(int $chainId, cell $toContract, int $functionSelector, cell $parameters, int $gasLimit, int $gasPrice, int $value, int $nonce, int $status, cell $transactionHash, int $blockNumber, int $confirmations) inline;

;; $TonFusion$_fun_sendEVMCrossChainMessage
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMCrossChainMessage((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, int, int, int, cell, int, int) $transaction, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $secret) impure inline_ref;

;; $TonFusion$_fun_processEVMTransfer
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processEVMTransfer((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref;

;; $TonFusion$_fun_processJettonTransferOrder
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonTransferOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref;

;; $TonFusion$_fun_completePartialFill
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_completePartialFill((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int) $msg) impure inline_ref;

;; $TonFusion$_fun_getFund
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_getFund((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_processJettonRefund
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonRefund((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order) impure inline_ref;

;; $TonFusion$_fun_refund
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_refund((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_processJettonRefundOrder
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonRefundOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, int, int, int, int, cell, int, int) $order) impure inline_ref;

;; $TonFusion$_fun_refundOrder
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_refundOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell) $msg) impure inline_ref;

;; $EscrowContract$_constructor_chainId_contractAddress_deployed_totalOrders
((int, slice, int, int)) $EscrowContract$_constructor_chainId_contractAddress_deployed_totalOrders(int $chainId, slice $contractAddress, int $deployed, int $totalOrders) inline;

;; $TonFusion$_fun_deployEscrow
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_deployEscrow((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_updateRelayerStats
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_updateRelayerStats((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (slice, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_findBridgeForChain
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), int) $TonFusion$_fun_findBridgeForChain((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, int $chainId) impure inline_ref;

;; $TonFusion$_fun_handleEVMBridgeConfirmation
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_handleEVMBridgeConfirmation((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_handleEVMOraclePriceUpdate
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_handleEVMOraclePriceUpdate((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_handleEVMChainValidation
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_handleEVMChainValidation((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_sendEVMCrossChainMessageToBridge
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMCrossChainMessageToBridge((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_processEVMCrossChainMessage
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processEVMCrossChainMessage((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_sendEVMContractDeployToBridge
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMContractDeployToBridge((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, cell, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_processEVMContractDeploy
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processEVMContractDeploy((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, cell, int, int, cell) $msg) impure inline_ref;

;; $TonFusion$_fun_sendEVMTransactionRetryToBridge
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMTransactionRetryToBridge((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, int, int, int, cell, int, int) $transaction) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $TonFusion$_fun_notify
((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_notify((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $body) impure inline;

;; $EVMBridgeData$_constructor_bridgeId_sourceChainId_targetChainId_bridgeContract_bridgeFee_minTransferAmount_maxTransferAmount_isActive_lastUpdateTimestamp
((int, int, int, slice, int, int, int, int, int)) $EVMBridgeData$_constructor_bridgeId_sourceChainId_targetChainId_bridgeContract_bridgeFee_minTransferAmount_maxTransferAmount_isActive_lastUpdateTimestamp(int $bridgeId, int $sourceChainId, int $targetChainId, slice $bridgeContract, int $bridgeFee, int $minTransferAmount, int $maxTransferAmount, int $isActive, int $lastUpdateTimestamp) inline;

;; $EVMOracleData$_constructor_oracleId_chainId_oracleContract_tokenAddress_priceDecimals_heartbeatInterval_isActive_lastPriceUpdate
((int, int, slice, slice, int, int, int, int)) $EVMOracleData$_constructor_oracleId_chainId_oracleContract_tokenAddress_priceDecimals_heartbeatInterval_isActive_lastPriceUpdate(int $oracleId, int $chainId, slice $oracleContract, slice $tokenAddress, int $priceDecimals, int $heartbeatInterval, int $isActive, int $lastPriceUpdate) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; TonFusion_TonFusion.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

builder __tact_store_addr_none(builder b) asm "b{00} STSLICECONST";

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        return __tact_store_addr_none(b);
    } else {
        return b.store_slice(address);
    }
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) """
    DICTSETREF
""";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGET NULLSWAPIFNOT
""";

(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGETREF NULLSWAPIFNOT
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int __tact_int_eq_nullable_left(int a, int b) inline {
    return (null?(a)) ? (false) : (a == b);
}

int __tact_cell_eq(cell a, cell b) inline {
    return (a.cell_hash() ==  b.cell_hash());
}

forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v) asm """
    4 TUPLE
""";

forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v) asm """
    4 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6 -> tuple __tact_tuple_create_7((X0, X1, X2, X3, X4, X5, X6) v) asm """
    7 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6 -> (X0, X1, X2, X3, X4, X5, X6) __tact_tuple_destroy_7(tuple v) asm """
    7 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7 -> tuple __tact_tuple_create_8((X0, X1, X2, X3, X4, X5, X6, X7) v) asm """
    8 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7 -> (X0, X1, X2, X3, X4, X5, X6, X7) __tact_tuple_destroy_8(tuple v) asm """
    8 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> tuple __tact_tuple_create_9((X0, X1, X2, X3, X4, X5, X6, X7, X8) v) asm """
    9 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8) __tact_tuple_destroy_9(tuple v) asm """
    9 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> tuple __tact_tuple_create_10((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) v) asm """
    10 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __tact_tuple_destroy_10(tuple v) asm """
    10 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> tuple __tact_tuple_create_11((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) v) asm """
    11 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __tact_tuple_destroy_11(tuple v) asm """
    11 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> tuple __tact_tuple_create_12((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) v) asm """
    12 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __tact_tuple_destroy_12(tuple v) asm """
    12 UNTUPLE
""";

slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
    }
}

int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get_ref(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline {
    var (r, ok) = udict_get?(d, kl, k);
    if (ok) {
        return r~load_uint(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = udict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (udict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
    }
}

cell __tact_dict_get_uint_cell(cell d, int kl, int k) inline {
    var (r, ok) = udict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = udict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (udict_set_ref(d, kl, k, v), ());
    }
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_min(int $x, int $y) impure asm """
    MIN
""";

int $global_max(int $x, int $y) impure asm """
    MAX
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

int $global_getComputeFee(int $gasUsed, int $isMasterchain) impure asm """
    GETGASFEE
""";

int $global_getForwardFee(int $cells, int $bits, int $isMasterchain) impure asm """
    GETFORWARDFEE
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_cashback(slice $to) impure asm """
    NEWC
    x{42_} STSLICECONST // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

int $global_now() impure asm """
    NOW
""";

int $Cell$_fun_hash(cell $self) impure asm """
    HASHCU
""";

builder $Builder$_fun_storeBool(int $value, builder $self) impure asm """
    1 STI
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure asm """
    LDMSGADDR   // load dest:MsgAddressInt
    LDGRAMS     // load value:CurrencyCollection
    ONE
    SDSKIPFIRST // skip extra currency collection
    LDGRAMS     // load ihr_fee
    LDGRAMS     // load fwd_fee, we'll be using this!
    DROP        // drop remaining Slice (with created_lt and created_at)

    // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
    // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
    6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context

    ZERO              // not masterchain
    GETORIGINALFWDFEE // floor(fwd_fee * 2^16 / (2^16 - first_frac)), where
                      // first_frac is a value listed in config param 25
                      // of the blockchain: https://tonviewer.com/config#25
                      // this instruction effectively multiplies the fwd_fee by 1.5,
                      // at least for the current value of first_frac, which is 21845
""";

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_notify((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

;; TonFusion_TonFusion.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline {
    return ($code, $data);
}

;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: OrderConfig
;; TLB: _ id:uint32 srcJettonAddress:address senderPubKey:address receiverPubKey:address hashlock:uint256 timelock:uint32 amount:uint64 finalized:bool partialFills:dict<uint256, uint64> totalFilled:uint64 direction:uint8 = OrderConfig
;;

builder $OrderConfig$_store(builder build_0, (int, slice, slice, slice, int, int, int, int, cell, int, int) v) inline_ref {
    var (v'id, v'srcJettonAddress, v'senderPubKey, v'receiverPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_slice(v'srcJettonAddress);
    build_0 = build_0.store_slice(v'senderPubKey);
    build_0 = build_0.store_slice(v'receiverPubKey);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'hashlock, 256);
    build_1 = build_1.store_uint(v'timelock, 32);
    build_1 = build_1.store_uint(v'amount, 64);
    build_1 = build_1.store_int(v'finalized, 1);
    build_1 = build_1.store_dict(v'partialFills);
    build_1 = build_1.store_uint(v'totalFilled, 64);
    build_1 = build_1.store_uint(v'direction, 8);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

cell $OrderConfig$_store_cell((int, slice, slice, slice, int, int, int, int, cell, int, int) v, builder b) inline {
    return $OrderConfig$_store(b, v).end_cell();
}

(slice, ((int, slice, slice, slice, int, int, int, int, cell, int, int))) $OrderConfig$_load(slice sc_0) inline_ref {
    var v'id = sc_0~load_uint(32);
    var v'srcJettonAddress = sc_0~load_msg_addr();
    var v'senderPubKey = sc_0~load_msg_addr();
    var v'receiverPubKey = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'hashlock = sc_1~load_uint(256);
    var v'timelock = sc_1~load_uint(32);
    var v'amount = sc_1~load_uint(64);
    var v'finalized = sc_1~load_int(1);
    var v'partialFills = sc_1~load_dict();
    var v'totalFilled = sc_1~load_uint(64);
    var v'direction = sc_1~load_uint(8);
    return (sc_0, (v'id, v'srcJettonAddress, v'senderPubKey, v'receiverPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction));
}

tuple $OrderConfig$_as_optional((int, slice, slice, slice, int, int, int, int, cell, int, int) v) inline {
    var (v'id, v'srcJettonAddress, v'senderPubKey, v'receiverPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction) = v;
    return __tact_tuple_create_11(v'id, v'srcJettonAddress, v'senderPubKey, v'receiverPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction);
}

tuple $OrderConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $OrderConfig$_as_optional(sc~$OrderConfig$_load());
}

((int, slice, slice, slice, int, int, int, int, cell, int, int)) $OrderConfig$_tensor_cast((int, slice, slice, slice, int, int, int, int, cell, int, int) v) asm "NOP";

((int, slice, slice, slice, int, int, int, int, cell, int, int)) $OrderConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'id, slice vvv'srcJettonAddress, slice vvv'senderPubKey, slice vvv'receiverPubKey, int vvv'hashlock, int vvv'timelock, int vvv'amount, int vvv'finalized, cell vvv'partialFills, int vvv'totalFilled, int vvv'direction) = __tact_tuple_destroy_11(v);
    return (vvv'id, vvv'srcJettonAddress, vvv'senderPubKey, vvv'receiverPubKey, vvv'hashlock, vvv'timelock, vvv'amount, vvv'finalized, vvv'partialFills, vvv'totalFilled, vvv'direction);
}

;;
;; Type: LockJetton
;; Header: 0xf512f7df
;; TLB: lock_jetton#f512f7df orderConfig:OrderConfig{id:uint32,srcJettonAddress:address,senderPubKey:address,receiverPubKey:address,hashlock:uint256,timelock:uint32,amount:uint64,finalized:bool,partialFills:dict<uint256, uint64>,totalFilled:uint64,direction:uint8} jetton:^cell customPayload:Maybe ^cell = LockJetton
;;

(slice, (((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $LockJetton$_load(slice sc_0) impure inline {
    throw_unless(129, sc_0~load_uint(32) == 4111661023);
    var v'orderConfig = sc_0~$OrderConfig$_load();
    var v'jetton = sc_0~load_ref();
    var v'customPayload = sc_0~load_maybe_ref();
    return (sc_0, (v'orderConfig, v'jetton, v'customPayload));
}

(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $LockJetton$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$LockJetton$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: Order
;; TLB: _ id:uint32 srcJettonAddress:address senderPubKey:address hashlock:uint256 timelock:uint32 amount:uint64 finalized:bool partialFills:dict<uint256, uint64> totalFilled:uint64 direction:uint8 = Order
;;

builder $Order$_store(builder build_0, (int, slice, slice, int, int, int, int, cell, int, int) v) inline {
    var (v'id, v'srcJettonAddress, v'senderPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_slice(v'srcJettonAddress);
    build_0 = build_0.store_slice(v'senderPubKey);
    build_0 = build_0.store_uint(v'hashlock, 256);
    build_0 = build_0.store_uint(v'timelock, 32);
    build_0 = build_0.store_uint(v'amount, 64);
    build_0 = build_0.store_int(v'finalized, 1);
    build_0 = build_0.store_dict(v'partialFills);
    build_0 = build_0.store_uint(v'totalFilled, 64);
    build_0 = build_0.store_uint(v'direction, 8);
    return build_0;
}

cell $Order$_store_cell((int, slice, slice, int, int, int, int, cell, int, int) v, builder b) inline {
    return $Order$_store(b, v).end_cell();
}

(slice, ((int, slice, slice, int, int, int, int, cell, int, int))) $Order$_load(slice sc_0) inline {
    var v'id = sc_0~load_uint(32);
    var v'srcJettonAddress = sc_0~load_msg_addr();
    var v'senderPubKey = sc_0~load_msg_addr();
    var v'hashlock = sc_0~load_uint(256);
    var v'timelock = sc_0~load_uint(32);
    var v'amount = sc_0~load_uint(64);
    var v'finalized = sc_0~load_int(1);
    var v'partialFills = sc_0~load_dict();
    var v'totalFilled = sc_0~load_uint(64);
    var v'direction = sc_0~load_uint(8);
    return (sc_0, (v'id, v'srcJettonAddress, v'senderPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction));
}

tuple $Order$_as_optional((int, slice, slice, int, int, int, int, cell, int, int) v) inline {
    var (v'id, v'srcJettonAddress, v'senderPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction) = v;
    return __tact_tuple_create_10(v'id, v'srcJettonAddress, v'senderPubKey, v'hashlock, v'timelock, v'amount, v'finalized, v'partialFills, v'totalFilled, v'direction);
}

tuple $Order$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Order$_as_optional(sc~$Order$_load());
}

((int, slice, slice, int, int, int, int, cell, int, int)) $Order$_tensor_cast((int, slice, slice, int, int, int, int, cell, int, int) v) asm "NOP";

((int, slice, slice, int, int, int, int, cell, int, int)) $Order$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'id, slice vvv'srcJettonAddress, slice vvv'senderPubKey, int vvv'hashlock, int vvv'timelock, int vvv'amount, int vvv'finalized, cell vvv'partialFills, int vvv'totalFilled, int vvv'direction) = __tact_tuple_destroy_10(v);
    return (vvv'id, vvv'srcJettonAddress, vvv'senderPubKey, vvv'hashlock, vvv'timelock, vvv'amount, vvv'finalized, vvv'partialFills, vvv'totalFilled, vvv'direction);
}

;;
;; Type: CreateOrder
;; Header: 0x7362d09c
;; TLB: create_order#7362d09c orderConfig:Order{id:uint32,srcJettonAddress:address,senderPubKey:address,hashlock:uint256,timelock:uint32,amount:uint64,finalized:bool,partialFills:dict<uint256, uint64>,totalFilled:uint64,direction:uint8} jetton:^cell customPayload:Maybe ^cell = CreateOrder
;;

(slice, (((int, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $CreateOrder$_load(slice sc_0) impure inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'orderConfig = sc_1~$Order$_load();
    var v'jetton = sc_1~load_ref();
    var v'customPayload = sc_1~load_maybe_ref();
    return (sc_0, (v'orderConfig, v'jetton, v'customPayload));
}

(((int, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $CreateOrder$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$CreateOrder$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: CreateEVMToTONOrder
;; Header: 0x8b341822
;; TLB: create_evm_to_ton_order#8b341822 orderConfig:OrderConfig{id:uint32,srcJettonAddress:address,senderPubKey:address,receiverPubKey:address,hashlock:uint256,timelock:uint32,amount:uint64,finalized:bool,partialFills:dict<uint256, uint64>,totalFilled:uint64,direction:uint8} evmContractAddress:^cell customPayload:Maybe ^cell = CreateEVMToTONOrder
;;

builder $CreateEVMToTONOrder$_store(builder build_0, ((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v) inline {
    var ((v'orderConfig'id, v'orderConfig'srcJettonAddress, v'orderConfig'senderPubKey, v'orderConfig'receiverPubKey, v'orderConfig'hashlock, v'orderConfig'timelock, v'orderConfig'amount, v'orderConfig'finalized, v'orderConfig'partialFills, v'orderConfig'totalFilled, v'orderConfig'direction), v'evmContractAddress, v'customPayload) = v;
    build_0 = store_uint(build_0, 2335447074, 32);
    build_0 = $OrderConfig$_store(build_0, (v'orderConfig'id, v'orderConfig'srcJettonAddress, v'orderConfig'senderPubKey, v'orderConfig'receiverPubKey, v'orderConfig'hashlock, v'orderConfig'timelock, v'orderConfig'amount, v'orderConfig'finalized, v'orderConfig'partialFills, v'orderConfig'totalFilled, v'orderConfig'direction));
    build_0 = build_0.store_ref(v'evmContractAddress);
    build_0 = build_0.store_maybe_ref(v'customPayload);
    return build_0;
}

cell $CreateEVMToTONOrder$_store_cell(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v, builder b) inline {
    return $CreateEVMToTONOrder$_store(b, v).end_cell();
}

(slice, (((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $CreateEVMToTONOrder$_load(slice sc_0) impure inline {
    throw_unless(129, sc_0~load_uint(32) == 2335447074);
    var v'orderConfig = sc_0~$OrderConfig$_load();
    var v'evmContractAddress = sc_0~load_ref();
    var v'customPayload = sc_0~load_maybe_ref();
    return (sc_0, (v'orderConfig, v'evmContractAddress, v'customPayload));
}

(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $CreateEVMToTONOrder$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$CreateEVMToTONOrder$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: CreateTONToEVMOrder
;; Header: 0x62239978
;; TLB: create_ton_to_evm_order#62239978 orderConfig:OrderConfig{id:uint32,srcJettonAddress:address,senderPubKey:address,receiverPubKey:address,hashlock:uint256,timelock:uint32,amount:uint64,finalized:bool,partialFills:dict<uint256, uint64>,totalFilled:uint64,direction:uint8} evmContractAddress:^cell customPayload:Maybe ^cell = CreateTONToEVMOrder
;;

builder $CreateTONToEVMOrder$_store(builder build_0, ((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v) inline {
    var ((v'orderConfig'id, v'orderConfig'srcJettonAddress, v'orderConfig'senderPubKey, v'orderConfig'receiverPubKey, v'orderConfig'hashlock, v'orderConfig'timelock, v'orderConfig'amount, v'orderConfig'finalized, v'orderConfig'partialFills, v'orderConfig'totalFilled, v'orderConfig'direction), v'evmContractAddress, v'customPayload) = v;
    build_0 = store_uint(build_0, 1646500216, 32);
    build_0 = $OrderConfig$_store(build_0, (v'orderConfig'id, v'orderConfig'srcJettonAddress, v'orderConfig'senderPubKey, v'orderConfig'receiverPubKey, v'orderConfig'hashlock, v'orderConfig'timelock, v'orderConfig'amount, v'orderConfig'finalized, v'orderConfig'partialFills, v'orderConfig'totalFilled, v'orderConfig'direction));
    build_0 = build_0.store_ref(v'evmContractAddress);
    build_0 = build_0.store_maybe_ref(v'customPayload);
    return build_0;
}

cell $CreateTONToEVMOrder$_store_cell(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell) v, builder b) inline {
    return $CreateTONToEVMOrder$_store(b, v).end_cell();
}

(slice, (((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell))) $CreateTONToEVMOrder$_load(slice sc_0) impure inline {
    throw_unless(129, sc_0~load_uint(32) == 1646500216);
    var v'orderConfig = sc_0~$OrderConfig$_load();
    var v'evmContractAddress = sc_0~load_ref();
    var v'customPayload = sc_0~load_maybe_ref();
    return (sc_0, (v'orderConfig, v'evmContractAddress, v'customPayload));
}

(((int, slice, slice, slice, int, int, int, int, cell, int, int), cell, cell)) $CreateTONToEVMOrder$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$CreateTONToEVMOrder$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: PartialFill
;; Header: 0x4ef5cb26
;; TLB: partial_fill#4ef5cb26 orderHash:uint256 secret:uint256 fillAmount:uint64 resolver:address customPayload:Maybe ^cell = PartialFill
;;

((int, int, int, slice, cell)) $PartialFill$_tensor_cast((int, int, int, slice, cell) v) asm "NOP";

;;
;; Type: CompletePartialFill
;; Header: 0x7a7b8c9d
;; TLB: complete_partial_fill#7a7b8c9d orderHash:uint256 secret:uint256 = CompletePartialFill
;;

((int, int)) $CompletePartialFill$_tensor_cast((int, int) v) asm "NOP";

;;
;; Type: EVMCrossChainMessage
;; Header: 0x9a8b7c6d
;; TLB: evm_cross_chain_message#9a8b7c6d targetChainId:uint32 targetContract:^cell functionSelector:uint32 parameters:^cell gasLimit:uint32 value:uint64 customPayload:Maybe ^cell = EVMCrossChainMessage
;;

builder $EVMCrossChainMessage$_store(builder build_0, (int, cell, int, cell, int, int, cell) v) inline {
    var (v'targetChainId, v'targetContract, v'functionSelector, v'parameters, v'gasLimit, v'value, v'customPayload) = v;
    build_0 = store_uint(build_0, 2592832621, 32);
    build_0 = build_0.store_uint(v'targetChainId, 32);
    build_0 = build_0.store_ref(v'targetContract);
    build_0 = build_0.store_uint(v'functionSelector, 32);
    build_0 = build_0.store_ref(v'parameters);
    build_0 = build_0.store_uint(v'gasLimit, 32);
    build_0 = build_0.store_uint(v'value, 64);
    build_0 = build_0.store_maybe_ref(v'customPayload);
    return build_0;
}

cell $EVMCrossChainMessage$_store_cell((int, cell, int, cell, int, int, cell) v, builder b) inline {
    return $EVMCrossChainMessage$_store(b, v).end_cell();
}

((int, cell, int, cell, int, int, cell)) $EVMCrossChainMessage$_tensor_cast((int, cell, int, cell, int, int, cell) v) asm "NOP";

;;
;; Type: EVMContractDeploy
;; Header: 0x5e4f3d2c
;; TLB: evm_contract_deploy#5e4f3d2c targetChainId:uint32 contractBytecode:^cell constructorParams:^cell gasLimit:uint32 value:uint64 customPayload:Maybe ^cell = EVMContractDeploy
;;

builder $EVMContractDeploy$_store(builder build_0, (int, cell, cell, int, int, cell) v) inline {
    var (v'targetChainId, v'contractBytecode, v'constructorParams, v'gasLimit, v'value, v'customPayload) = v;
    build_0 = store_uint(build_0, 1582251308, 32);
    build_0 = build_0.store_uint(v'targetChainId, 32);
    build_0 = build_0.store_ref(v'contractBytecode);
    build_0 = build_0.store_ref(v'constructorParams);
    build_0 = build_0.store_uint(v'gasLimit, 32);
    build_0 = build_0.store_uint(v'value, 64);
    build_0 = build_0.store_maybe_ref(v'customPayload);
    return build_0;
}

cell $EVMContractDeploy$_store_cell((int, cell, cell, int, int, cell) v, builder b) inline {
    return $EVMContractDeploy$_store(b, v).end_cell();
}

((int, cell, cell, int, int, cell)) $EVMContractDeploy$_tensor_cast((int, cell, cell, int, int, cell) v) asm "NOP";

;;
;; Type: EVMBridgeConfirmation
;; Header: 0x1f2e3d4c
;; TLB: evm_bridge_confirmation#1f2e3d4c bridgeId:uint32 transactionHash:^cell blockNumber:uint64 confirmations:uint32 customPayload:Maybe ^cell = EVMBridgeConfirmation
;;

((int, cell, int, int, cell)) $EVMBridgeConfirmation$_tensor_cast((int, cell, int, int, cell) v) asm "NOP";

;;
;; Type: EVMOraclePriceUpdate
;; Header: 0x8c9d0e1f
;; TLB: evm_oracle_price_update#8c9d0e1f oracleId:uint32 tokenAddress:address price:uint64 timestamp:uint32 customPayload:Maybe ^cell = EVMOraclePriceUpdate
;;

((int, slice, int, int, cell)) $EVMOraclePriceUpdate$_tensor_cast((int, slice, int, int, cell) v) asm "NOP";

;;
;; Type: EVMChainValidation
;; Header: 0x2d3e4f5a
;; TLB: evm_chain_validation#2d3e4f5a chainId:uint32 blockNumber:uint64 gasPrice:uint64 customPayload:Maybe ^cell = EVMChainValidation
;;

((int, int, int, cell)) $EVMChainValidation$_tensor_cast((int, int, int, cell) v) asm "NOP";

;;
;; Type: DeployEscrow
;; Header: 0x595f07bc
;; TLB: deploy_escrow#595f07bc chainId:uint32 targetAddress:address customPayload:Maybe ^cell = DeployEscrow
;;

((int, slice, cell)) $DeployEscrow$_tensor_cast((int, slice, cell) v) asm "NOP";

;;
;; Type: UpdateRelayerStats
;; Header: 0x7362d09f
;; TLB: update_relayer_stats#7362d09f relayer:address success:bool customPayload:Maybe ^cell = UpdateRelayerStats
;;

((slice, int, cell)) $UpdateRelayerStats$_tensor_cast((slice, int, cell) v) asm "NOP";

;;
;; Type: GetFund
;; Header: 0x50635fd2
;; TLB: get_fund#50635fd2 secret:uint256 hash:uint256 customPayload:Maybe ^cell = GetFund
;;

((int, int, cell)) $GetFund$_tensor_cast((int, int, cell) v) asm "NOP";

;;
;; Type: Refund
;; Header: 0xe49e1dcb
;; TLB: refund#e49e1dcb hash:uint256 customPayload:Maybe ^cell = Refund
;;

((int, cell)) $Refund$_tensor_cast((int, cell) v) asm "NOP";

;;
;; Type: RefundOrder
;; Header: 0x7362d09d
;; TLB: refund_order#7362d09d hash:uint256 customPayload:Maybe ^cell = RefundOrder
;;

((int, cell)) $RefundOrder$_tensor_cast((int, cell) v) asm "NOP";

;;
;; Type: EscrowContract
;; TLB: _ chainId:uint32 contractAddress:address deployed:bool totalOrders:uint32 = EscrowContract
;;

builder $EscrowContract$_store(builder build_0, (int, slice, int, int) v) inline {
    var (v'chainId, v'contractAddress, v'deployed, v'totalOrders) = v;
    build_0 = build_0.store_uint(v'chainId, 32);
    build_0 = build_0.store_slice(v'contractAddress);
    build_0 = build_0.store_int(v'deployed, 1);
    build_0 = build_0.store_uint(v'totalOrders, 32);
    return build_0;
}

cell $EscrowContract$_store_cell((int, slice, int, int) v, builder b) inline {
    return $EscrowContract$_store(b, v).end_cell();
}

(slice, ((int, slice, int, int))) $EscrowContract$_load(slice sc_0) inline {
    var v'chainId = sc_0~load_uint(32);
    var v'contractAddress = sc_0~load_msg_addr();
    var v'deployed = sc_0~load_int(1);
    var v'totalOrders = sc_0~load_uint(32);
    return (sc_0, (v'chainId, v'contractAddress, v'deployed, v'totalOrders));
}

tuple $EscrowContract$_as_optional((int, slice, int, int) v) inline {
    var (v'chainId, v'contractAddress, v'deployed, v'totalOrders) = v;
    return __tact_tuple_create_4(v'chainId, v'contractAddress, v'deployed, v'totalOrders);
}

tuple $EscrowContract$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $EscrowContract$_as_optional(sc~$EscrowContract$_load());
}

_ $EscrowContract$_get_deployed((int, slice, int, int) v) inline {
    var (v'chainId, v'contractAddress, v'deployed, v'totalOrders) = v;
    return v'deployed;
}

((int, slice, int, int)) $EscrowContract$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'chainId, slice vvv'contractAddress, int vvv'deployed, int vvv'totalOrders) = __tact_tuple_destroy_4(v);
    return (vvv'chainId, vvv'contractAddress, vvv'deployed, vvv'totalOrders);
}

((int, slice, int, int)) $EscrowContract$_constructor_chainId_contractAddress_deployed_totalOrders(int $chainId, slice $contractAddress, int $deployed, int $totalOrders) inline {
    return ($chainId, $contractAddress, $deployed, $totalOrders);
}

;;
;; Type: RelayerData
;; TLB: _ address:address whitelisted:bool totalResolves:uint32 successRate:uint16 = RelayerData
;;

builder $RelayerData$_store(builder build_0, (slice, int, int, int) v) inline {
    var (v'address, v'whitelisted, v'totalResolves, v'successRate) = v;
    build_0 = build_0.store_slice(v'address);
    build_0 = build_0.store_int(v'whitelisted, 1);
    build_0 = build_0.store_uint(v'totalResolves, 32);
    build_0 = build_0.store_uint(v'successRate, 16);
    return build_0;
}

cell $RelayerData$_store_cell((slice, int, int, int) v, builder b) inline {
    return $RelayerData$_store(b, v).end_cell();
}

(slice, ((slice, int, int, int))) $RelayerData$_load(slice sc_0) inline {
    var v'address = sc_0~load_msg_addr();
    var v'whitelisted = sc_0~load_int(1);
    var v'totalResolves = sc_0~load_uint(32);
    var v'successRate = sc_0~load_uint(16);
    return (sc_0, (v'address, v'whitelisted, v'totalResolves, v'successRate));
}

tuple $RelayerData$_as_optional((slice, int, int, int) v) inline {
    var (v'address, v'whitelisted, v'totalResolves, v'successRate) = v;
    return __tact_tuple_create_4(v'address, v'whitelisted, v'totalResolves, v'successRate);
}

tuple $RelayerData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $RelayerData$_as_optional(sc~$RelayerData$_load());
}

_ $RelayerData$_get_address((slice, int, int, int) v) inline {
    var (v'address, v'whitelisted, v'totalResolves, v'successRate) = v;
    return v'address;
}

_ $RelayerData$_get_whitelisted((slice, int, int, int) v) inline {
    var (v'address, v'whitelisted, v'totalResolves, v'successRate) = v;
    return v'whitelisted;
}

_ $RelayerData$_get_totalResolves((slice, int, int, int) v) inline {
    var (v'address, v'whitelisted, v'totalResolves, v'successRate) = v;
    return v'totalResolves;
}

_ $RelayerData$_get_successRate((slice, int, int, int) v) inline {
    var (v'address, v'whitelisted, v'totalResolves, v'successRate) = v;
    return v'successRate;
}

((slice, int, int, int)) $RelayerData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'address, int vvv'whitelisted, int vvv'totalResolves, int vvv'successRate) = __tact_tuple_destroy_4(v);
    return (vvv'address, vvv'whitelisted, vvv'totalResolves, vvv'successRate);
}

((slice, int, int, int)) $RelayerData$_constructor_address_whitelisted_totalResolves_successRate(slice $address, int $whitelisted, int $totalResolves, int $successRate) inline {
    return ($address, $whitelisted, $totalResolves, $successRate);
}

;;
;; Type: JettonWalletData
;; TLB: _ balance:coins ownerAddress:address jettonMasterAddress:address jettonWalletCode:^cell = JettonWalletData
;;

builder $JettonWalletData$_store(builder build_0, (int, slice, slice, cell) v) inline {
    var (v'balance, v'ownerAddress, v'jettonMasterAddress, v'jettonWalletCode) = v;
    build_0 = build_0.store_varuint16(v'balance);
    build_0 = build_0.store_slice(v'ownerAddress);
    build_0 = build_0.store_slice(v'jettonMasterAddress);
    build_0 = build_0.store_ref(v'jettonWalletCode);
    return build_0;
}

cell $JettonWalletData$_store_cell((int, slice, slice, cell) v, builder b) inline {
    return $JettonWalletData$_store(b, v).end_cell();
}

((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_ownerAddress_jettonMasterAddress_jettonWalletCode(int $balance, slice $ownerAddress, slice $jettonMasterAddress, cell $jettonWalletCode) inline {
    return ($balance, $ownerAddress, $jettonMasterAddress, $jettonWalletCode);
}

;;
;; Type: EVMChainConfig
;; TLB: _ chainId:uint32 rpcEndpoint:^cell blockTime:uint32 gasLimit:uint32 isActive:bool bridgeAddress:^cell oracleAddress:^cell = EVMChainConfig
;;

builder $EVMChainConfig$_store(builder build_0, (int, cell, int, int, int, cell, cell) v) inline {
    var (v'chainId, v'rpcEndpoint, v'blockTime, v'gasLimit, v'isActive, v'bridgeAddress, v'oracleAddress) = v;
    build_0 = build_0.store_uint(v'chainId, 32);
    build_0 = build_0.store_ref(v'rpcEndpoint);
    build_0 = build_0.store_uint(v'blockTime, 32);
    build_0 = build_0.store_uint(v'gasLimit, 32);
    build_0 = build_0.store_int(v'isActive, 1);
    build_0 = build_0.store_ref(v'bridgeAddress);
    build_0 = build_0.store_ref(v'oracleAddress);
    return build_0;
}

cell $EVMChainConfig$_store_cell((int, cell, int, int, int, cell, cell) v, builder b) inline {
    return $EVMChainConfig$_store(b, v).end_cell();
}

(slice, ((int, cell, int, int, int, cell, cell))) $EVMChainConfig$_load(slice sc_0) inline {
    var v'chainId = sc_0~load_uint(32);
    var v'rpcEndpoint = sc_0~load_ref();
    var v'blockTime = sc_0~load_uint(32);
    var v'gasLimit = sc_0~load_uint(32);
    var v'isActive = sc_0~load_int(1);
    var v'bridgeAddress = sc_0~load_ref();
    var v'oracleAddress = sc_0~load_ref();
    return (sc_0, (v'chainId, v'rpcEndpoint, v'blockTime, v'gasLimit, v'isActive, v'bridgeAddress, v'oracleAddress));
}

tuple $EVMChainConfig$_as_optional((int, cell, int, int, int, cell, cell) v) inline {
    var (v'chainId, v'rpcEndpoint, v'blockTime, v'gasLimit, v'isActive, v'bridgeAddress, v'oracleAddress) = v;
    return __tact_tuple_create_7(v'chainId, v'rpcEndpoint, v'blockTime, v'gasLimit, v'isActive, v'bridgeAddress, v'oracleAddress);
}

tuple $EVMChainConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $EVMChainConfig$_as_optional(sc~$EVMChainConfig$_load());
}

((int, cell, int, int, int, cell, cell)) $EVMChainConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'chainId, cell vvv'rpcEndpoint, int vvv'blockTime, int vvv'gasLimit, int vvv'isActive, cell vvv'bridgeAddress, cell vvv'oracleAddress) = __tact_tuple_destroy_7(v);
    return (vvv'chainId, vvv'rpcEndpoint, vvv'blockTime, vvv'gasLimit, vvv'isActive, vvv'bridgeAddress, vvv'oracleAddress);
}

((int, cell, int, int, int, cell, cell)) $EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(int $chainId, cell $rpcEndpoint, int $blockTime, int $gasLimit, int $isActive, cell $bridgeAddress, cell $oracleAddress) inline {
    return ($chainId, $rpcEndpoint, $blockTime, $gasLimit, $isActive, $bridgeAddress, $oracleAddress);
}

;;
;; Type: EVMTransaction
;; TLB: _ chainId:uint32 toContract:^cell functionSelector:uint32 parameters:^cell gasLimit:uint32 gasPrice:uint64 value:uint64 nonce:uint64 status:uint8 transactionHash:^cell blockNumber:uint64 confirmations:uint32 = EVMTransaction
;;

builder $EVMTransaction$_store(builder build_0, (int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline_ref {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    build_0 = build_0.store_uint(v'chainId, 32);
    build_0 = build_0.store_ref(v'toContract);
    build_0 = build_0.store_uint(v'functionSelector, 32);
    build_0 = build_0.store_ref(v'parameters);
    build_0 = build_0.store_uint(v'gasLimit, 32);
    build_0 = build_0.store_uint(v'gasPrice, 64);
    build_0 = build_0.store_uint(v'value, 64);
    build_0 = build_0.store_uint(v'nonce, 64);
    build_0 = build_0.store_uint(v'status, 8);
    build_0 = build_0.store_ref(v'transactionHash);
    build_0 = build_0.store_uint(v'blockNumber, 64);
    build_0 = build_0.store_uint(v'confirmations, 32);
    return build_0;
}

cell $EVMTransaction$_store_cell((int, cell, int, cell, int, int, int, int, int, cell, int, int) v, builder b) inline {
    return $EVMTransaction$_store(b, v).end_cell();
}

(slice, ((int, cell, int, cell, int, int, int, int, int, cell, int, int))) $EVMTransaction$_load(slice sc_0) inline_ref {
    var v'chainId = sc_0~load_uint(32);
    var v'toContract = sc_0~load_ref();
    var v'functionSelector = sc_0~load_uint(32);
    var v'parameters = sc_0~load_ref();
    var v'gasLimit = sc_0~load_uint(32);
    var v'gasPrice = sc_0~load_uint(64);
    var v'value = sc_0~load_uint(64);
    var v'nonce = sc_0~load_uint(64);
    var v'status = sc_0~load_uint(8);
    var v'transactionHash = sc_0~load_ref();
    var v'blockNumber = sc_0~load_uint(64);
    var v'confirmations = sc_0~load_uint(32);
    return (sc_0, (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations));
}

tuple $EVMTransaction$_as_optional((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return __tact_tuple_create_12(v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations);
}

tuple $EVMTransaction$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $EVMTransaction$_as_optional(sc~$EVMTransaction$_load());
}

_ $EVMTransaction$_get_chainId((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'chainId;
}

_ $EVMTransaction$_get_toContract((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'toContract;
}

_ $EVMTransaction$_get_functionSelector((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'functionSelector;
}

_ $EVMTransaction$_get_parameters((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'parameters;
}

_ $EVMTransaction$_get_gasLimit((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'gasLimit;
}

_ $EVMTransaction$_get_gasPrice((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'gasPrice;
}

_ $EVMTransaction$_get_value((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'value;
}

_ $EVMTransaction$_get_nonce((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'nonce;
}

_ $EVMTransaction$_get_status((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'status;
}

_ $EVMTransaction$_get_transactionHash((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'transactionHash;
}

_ $EVMTransaction$_get_blockNumber((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'blockNumber;
}

_ $EVMTransaction$_get_confirmations((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) inline {
    var (v'chainId, v'toContract, v'functionSelector, v'parameters, v'gasLimit, v'gasPrice, v'value, v'nonce, v'status, v'transactionHash, v'blockNumber, v'confirmations) = v;
    return v'confirmations;
}

((int, cell, int, cell, int, int, int, int, int, cell, int, int)) $EVMTransaction$_tensor_cast((int, cell, int, cell, int, int, int, int, int, cell, int, int) v) asm "NOP";

((int, cell, int, cell, int, int, int, int, int, cell, int, int)) $EVMTransaction$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'chainId, cell vvv'toContract, int vvv'functionSelector, cell vvv'parameters, int vvv'gasLimit, int vvv'gasPrice, int vvv'value, int vvv'nonce, int vvv'status, cell vvv'transactionHash, int vvv'blockNumber, int vvv'confirmations) = __tact_tuple_destroy_12(v);
    return (vvv'chainId, vvv'toContract, vvv'functionSelector, vvv'parameters, vvv'gasLimit, vvv'gasPrice, vvv'value, vvv'nonce, vvv'status, vvv'transactionHash, vvv'blockNumber, vvv'confirmations);
}

((int, cell, int, cell, int, int, int, int, int, cell, int, int)) $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations(int $chainId, cell $toContract, int $functionSelector, cell $parameters, int $gasLimit, int $gasPrice, int $value, int $nonce, int $status, cell $transactionHash, int $blockNumber, int $confirmations) inline {
    return ($chainId, $toContract, $functionSelector, $parameters, $gasLimit, $gasPrice, $value, $nonce, $status, $transactionHash, $blockNumber, $confirmations);
}

;;
;; Type: EVMBridgeData
;; TLB: _ bridgeId:uint32 sourceChainId:uint32 targetChainId:uint32 bridgeContract:address bridgeFee:uint64 minTransferAmount:uint64 maxTransferAmount:uint64 isActive:bool lastUpdateTimestamp:uint32 = EVMBridgeData
;;

builder $EVMBridgeData$_store(builder build_0, (int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    build_0 = build_0.store_uint(v'bridgeId, 32);
    build_0 = build_0.store_uint(v'sourceChainId, 32);
    build_0 = build_0.store_uint(v'targetChainId, 32);
    build_0 = build_0.store_slice(v'bridgeContract);
    build_0 = build_0.store_uint(v'bridgeFee, 64);
    build_0 = build_0.store_uint(v'minTransferAmount, 64);
    build_0 = build_0.store_uint(v'maxTransferAmount, 64);
    build_0 = build_0.store_int(v'isActive, 1);
    build_0 = build_0.store_uint(v'lastUpdateTimestamp, 32);
    return build_0;
}

cell $EVMBridgeData$_store_cell((int, int, int, slice, int, int, int, int, int) v, builder b) inline {
    return $EVMBridgeData$_store(b, v).end_cell();
}

(slice, ((int, int, int, slice, int, int, int, int, int))) $EVMBridgeData$_load(slice sc_0) inline {
    var v'bridgeId = sc_0~load_uint(32);
    var v'sourceChainId = sc_0~load_uint(32);
    var v'targetChainId = sc_0~load_uint(32);
    var v'bridgeContract = sc_0~load_msg_addr();
    var v'bridgeFee = sc_0~load_uint(64);
    var v'minTransferAmount = sc_0~load_uint(64);
    var v'maxTransferAmount = sc_0~load_uint(64);
    var v'isActive = sc_0~load_int(1);
    var v'lastUpdateTimestamp = sc_0~load_uint(32);
    return (sc_0, (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp));
}

tuple $EVMBridgeData$_as_optional((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return __tact_tuple_create_9(v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp);
}

tuple $EVMBridgeData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $EVMBridgeData$_as_optional(sc~$EVMBridgeData$_load());
}

_ $EVMBridgeData$_get_sourceChainId((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return v'sourceChainId;
}

_ $EVMBridgeData$_get_targetChainId((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return v'targetChainId;
}

_ $EVMBridgeData$_get_bridgeContract((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return v'bridgeContract;
}

_ $EVMBridgeData$_get_minTransferAmount((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return v'minTransferAmount;
}

_ $EVMBridgeData$_get_maxTransferAmount((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return v'maxTransferAmount;
}

_ $EVMBridgeData$_get_isActive((int, int, int, slice, int, int, int, int, int) v) inline {
    var (v'bridgeId, v'sourceChainId, v'targetChainId, v'bridgeContract, v'bridgeFee, v'minTransferAmount, v'maxTransferAmount, v'isActive, v'lastUpdateTimestamp) = v;
    return v'isActive;
}

((int, int, int, slice, int, int, int, int, int)) $EVMBridgeData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'bridgeId, int vvv'sourceChainId, int vvv'targetChainId, slice vvv'bridgeContract, int vvv'bridgeFee, int vvv'minTransferAmount, int vvv'maxTransferAmount, int vvv'isActive, int vvv'lastUpdateTimestamp) = __tact_tuple_destroy_9(v);
    return (vvv'bridgeId, vvv'sourceChainId, vvv'targetChainId, vvv'bridgeContract, vvv'bridgeFee, vvv'minTransferAmount, vvv'maxTransferAmount, vvv'isActive, vvv'lastUpdateTimestamp);
}

((int, int, int, slice, int, int, int, int, int)) $EVMBridgeData$_constructor_bridgeId_sourceChainId_targetChainId_bridgeContract_bridgeFee_minTransferAmount_maxTransferAmount_isActive_lastUpdateTimestamp(int $bridgeId, int $sourceChainId, int $targetChainId, slice $bridgeContract, int $bridgeFee, int $minTransferAmount, int $maxTransferAmount, int $isActive, int $lastUpdateTimestamp) inline {
    return ($bridgeId, $sourceChainId, $targetChainId, $bridgeContract, $bridgeFee, $minTransferAmount, $maxTransferAmount, $isActive, $lastUpdateTimestamp);
}

;;
;; Type: EVMOracleData
;; TLB: _ oracleId:uint32 chainId:uint32 oracleContract:address tokenAddress:address priceDecimals:uint8 heartbeatInterval:uint32 isActive:bool lastPriceUpdate:uint32 = EVMOracleData
;;

builder $EVMOracleData$_store(builder build_0, (int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    build_0 = build_0.store_uint(v'oracleId, 32);
    build_0 = build_0.store_uint(v'chainId, 32);
    build_0 = build_0.store_slice(v'oracleContract);
    build_0 = build_0.store_slice(v'tokenAddress);
    build_0 = build_0.store_uint(v'priceDecimals, 8);
    build_0 = build_0.store_uint(v'heartbeatInterval, 32);
    build_0 = build_0.store_int(v'isActive, 1);
    build_0 = build_0.store_uint(v'lastPriceUpdate, 32);
    return build_0;
}

cell $EVMOracleData$_store_cell((int, int, slice, slice, int, int, int, int) v, builder b) inline {
    return $EVMOracleData$_store(b, v).end_cell();
}

(slice, ((int, int, slice, slice, int, int, int, int))) $EVMOracleData$_load(slice sc_0) inline {
    var v'oracleId = sc_0~load_uint(32);
    var v'chainId = sc_0~load_uint(32);
    var v'oracleContract = sc_0~load_msg_addr();
    var v'tokenAddress = sc_0~load_msg_addr();
    var v'priceDecimals = sc_0~load_uint(8);
    var v'heartbeatInterval = sc_0~load_uint(32);
    var v'isActive = sc_0~load_int(1);
    var v'lastPriceUpdate = sc_0~load_uint(32);
    return (sc_0, (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate));
}

tuple $EVMOracleData$_as_optional((int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    return __tact_tuple_create_8(v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate);
}

tuple $EVMOracleData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $EVMOracleData$_as_optional(sc~$EVMOracleData$_load());
}

_ $EVMOracleData$_get_chainId((int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    return v'chainId;
}

_ $EVMOracleData$_get_oracleContract((int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    return v'oracleContract;
}

_ $EVMOracleData$_get_tokenAddress((int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    return v'tokenAddress;
}

_ $EVMOracleData$_get_priceDecimals((int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    return v'priceDecimals;
}

_ $EVMOracleData$_get_lastPriceUpdate((int, int, slice, slice, int, int, int, int) v) inline {
    var (v'oracleId, v'chainId, v'oracleContract, v'tokenAddress, v'priceDecimals, v'heartbeatInterval, v'isActive, v'lastPriceUpdate) = v;
    return v'lastPriceUpdate;
}

((int, int, slice, slice, int, int, int, int)) $EVMOracleData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'oracleId, int vvv'chainId, slice vvv'oracleContract, slice vvv'tokenAddress, int vvv'priceDecimals, int vvv'heartbeatInterval, int vvv'isActive, int vvv'lastPriceUpdate) = __tact_tuple_destroy_8(v);
    return (vvv'oracleId, vvv'chainId, vvv'oracleContract, vvv'tokenAddress, vvv'priceDecimals, vvv'heartbeatInterval, vvv'isActive, vvv'lastPriceUpdate);
}

((int, int, slice, slice, int, int, int, int)) $EVMOracleData$_constructor_oracleId_chainId_oracleContract_tokenAddress_priceDecimals_heartbeatInterval_isActive_lastPriceUpdate(int $oracleId, int $chainId, slice $oracleContract, slice $tokenAddress, int $priceDecimals, int $heartbeatInterval, int $isActive, int $lastPriceUpdate) inline {
    return ($oracleId, $chainId, $oracleContract, $tokenAddress, $priceDecimals, $heartbeatInterval, $isActive, $lastPriceUpdate);
}

;;
;; Type: CrossChainMessage
;; TLB: _ sourceChain:uint32 targetChain:uint32 orderHash:uint256 amount:uint64 secret:uint256 timestamp:uint32 nonce:uint64 = CrossChainMessage
;;

builder $CrossChainMessage$_store(builder build_0, (int, int, int, int, int, int, int) v) inline {
    var (v'sourceChain, v'targetChain, v'orderHash, v'amount, v'secret, v'timestamp, v'nonce) = v;
    build_0 = build_0.store_uint(v'sourceChain, 32);
    build_0 = build_0.store_uint(v'targetChain, 32);
    build_0 = build_0.store_uint(v'orderHash, 256);
    build_0 = build_0.store_uint(v'amount, 64);
    build_0 = build_0.store_uint(v'secret, 256);
    build_0 = build_0.store_uint(v'timestamp, 32);
    build_0 = build_0.store_uint(v'nonce, 64);
    return build_0;
}

cell $CrossChainMessage$_store_cell((int, int, int, int, int, int, int) v, builder b) inline {
    return $CrossChainMessage$_store(b, v).end_cell();
}

((int, int, int, int, int, int, int)) $CrossChainMessage$_constructor_sourceChain_targetChain_orderHash_amount_secret_timestamp_nonce(int $sourceChain, int $targetChain, int $orderHash, int $amount, int $secret, int $timestamp, int $nonce) inline {
    return ($sourceChain, $targetChain, $orderHash, $amount, $secret, $timestamp, $nonce);
}

;;
;; Type: SendViaJettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: send_via_jetton_transfer#0f8a7ea5 queryId:uint64 amount:coins destination:address responseDestination:address customPayload:Maybe ^cell forwardTonAmount:coins forwardPayload:remainder<slice> = SendViaJettonTransfer
;;

builder $SendViaJettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline {
    var (v'queryId, v'amount, v'destination, v'responseDestination, v'customPayload, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'destination);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    build_0 = build_0.store_maybe_ref(v'customPayload);
    build_0 = build_0.store_varuint16(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $SendViaJettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v, builder b) inline {
    return $SendViaJettonTransfer$_store(b, v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload(int $queryId, int $amount, slice $responseDestination, slice $destination, int $forwardTonAmount, slice $forwardPayload, cell $customPayload) inline {
    return ($queryId, $amount, $destination, $responseDestination, $customPayload, $forwardTonAmount, $forwardPayload);
}

;;
;; Type: TonFusion
;; TLB: _ owner:address escrowLock:dict<uint256, ^OrderConfig{id:uint32,srcJettonAddress:address,senderPubKey:address,receiverPubKey:address,hashlock:uint256,timelock:uint32,amount:uint64,finalized:bool,partialFills:dict<uint256, uint64>,totalFilled:uint64,direction:uint8}> escrowOrder:dict<uint256, ^Order{id:uint32,srcJettonAddress:address,senderPubKey:address,hashlock:uint256,timelock:uint32,amount:uint64,finalized:bool,partialFills:dict<uint256, uint64>,totalFilled:uint64,direction:uint8}> jettons:dict<address, ^cell> jettonAccount:dict<address, address> whiteLists:dict<address, bool> relayers:dict<address, ^RelayerData{address:address,whitelisted:bool,totalResolves:uint32,successRate:uint16}> escrowContracts:dict<uint32, ^EscrowContract{chainId:uint32,contractAddress:address,deployed:bool,totalOrders:uint32}> totalOrders:uint32 totalVolume:uint64 totalResolves:uint32 evmChainConfigs:dict<uint32, ^EVMChainConfig{chainId:uint32,rpcEndpoint:^cell,blockTime:uint32,gasLimit:uint32,isActive:bool,bridgeAddress:^cell,oracleAddress:^cell}> evmTransactions:dict<uint64, ^EVMTransaction{chainId:uint32,toContract:^cell,functionSelector:uint32,parameters:^cell,gasLimit:uint32,gasPrice:uint64,value:uint64,nonce:uint64,status:uint8,transactionHash:^cell,blockNumber:uint64,confirmations:uint32}> evmBridges:dict<uint32, ^EVMBridgeData{bridgeId:uint32,sourceChainId:uint32,targetChainId:uint32,bridgeContract:address,bridgeFee:uint64,minTransferAmount:uint64,maxTransferAmount:uint64,isActive:bool,lastUpdateTimestamp:uint32}> evmOracles:dict<uint32, ^EVMOracleData{oracleId:uint32,chainId:uint32,oracleContract:address,tokenAddress:address,priceDecimals:uint8,heartbeatInterval:uint32,isActive:bool,lastPriceUpdate:uint32}> evmTransactionNonce:uint64 evmBridgeFees:uint64 = TonFusion
;;

builder $TonFusion$_store(builder build_0, (slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) v) inline {
    var (v'owner, v'escrowLock, v'escrowOrder, v'jettons, v'jettonAccount, v'whiteLists, v'relayers, v'escrowContracts, v'totalOrders, v'totalVolume, v'totalResolves, v'evmChainConfigs, v'evmTransactions, v'evmBridges, v'evmOracles, v'evmTransactionNonce, v'evmBridgeFees) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_dict(v'escrowLock);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'escrowOrder);
    build_1 = build_1.store_dict(v'jettons);
    build_1 = build_1.store_dict(v'jettonAccount);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'whiteLists);
    build_2 = build_2.store_dict(v'relayers);
    build_2 = build_2.store_dict(v'escrowContracts);
    build_2 = build_2.store_uint(v'totalOrders, 32);
    build_2 = build_2.store_uint(v'totalVolume, 64);
    build_2 = build_2.store_uint(v'totalResolves, 32);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'evmChainConfigs);
    build_3 = build_3.store_dict(v'evmTransactions);
    build_3 = build_3.store_dict(v'evmBridges);
    build_3 = build_3.store_dict(v'evmOracles);
    build_3 = build_3.store_uint(v'evmTransactionNonce, 64);
    build_3 = build_3.store_uint(v'evmBridgeFees, 64);
    build_2 = store_builder_ref(build_2, build_3);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int))) $TonFusion$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'escrowLock = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'escrowOrder = sc_1~load_dict();
    var v'jettons = sc_1~load_dict();
    var v'jettonAccount = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'whiteLists = sc_2~load_dict();
    var v'relayers = sc_2~load_dict();
    var v'escrowContracts = sc_2~load_dict();
    var v'totalOrders = sc_2~load_uint(32);
    var v'totalVolume = sc_2~load_uint(64);
    var v'totalResolves = sc_2~load_uint(32);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'evmChainConfigs = sc_3~load_dict();
    var v'evmTransactions = sc_3~load_dict();
    var v'evmBridges = sc_3~load_dict();
    var v'evmOracles = sc_3~load_dict();
    var v'evmTransactionNonce = sc_3~load_uint(64);
    var v'evmBridgeFees = sc_3~load_uint(64);
    return (sc_0, (v'owner, v'escrowLock, v'escrowOrder, v'jettons, v'jettonAccount, v'whiteLists, v'relayers, v'escrowContracts, v'totalOrders, v'totalVolume, v'totalResolves, v'evmChainConfigs, v'evmTransactions, v'evmBridges, v'evmOracles, v'evmTransactionNonce, v'evmBridgeFees));
}

(slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $TonFusion$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TonFusion$_load();
    }
    else {
        return $TonFusion$_contract_init();
    }
}

() $TonFusion$_contract_store((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $TonFusion$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract TonFusion functions
;;

(slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $TonFusion$_contract_init() impure inline {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = (null(), null(), null(), null(), null(), null(), null(), null(), 0, 0, 0, null(), null(), null(), null(), 0, 0);
    $self'owner = __tact_context_get_sender();
    return ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees);
}

slice $global_calculateJettonWalletAddress(slice $ownerAddress, slice $jettonMasterAddress, cell $jettonWalletCode) impure inline_ref {
    var ($initData'balance, $initData'ownerAddress, $initData'jettonMasterAddress, $initData'jettonWalletCode) = $JettonWalletData$_constructor_balance_ownerAddress_jettonMasterAddress_jettonWalletCode(0, $ownerAddress, $jettonMasterAddress, $jettonWalletCode);
    return $global_contractAddress($StateInit$_constructor_code_data($jettonWalletCode, $JettonWalletData$_store_cell(($initData'balance, $initData'ownerAddress, $initData'jettonMasterAddress, $initData'jettonWalletCode), begin_cell())));
}

slice $global_createZeroAddress() impure inline_ref {
    return $global_contractAddress($StateInit$_constructor_code_data($Builder$_fun_endCell($global_beginCell()), $Builder$_fun_endCell($global_beginCell())));
}

int $global_keccakBytes32(int $secret) impure inline_ref {
    cell $cell = $Builder$_fun_endCell(store_uint($global_beginCell(), $secret, 256));
    return $Cell$_fun_hash($cell);
}

int $global_isValidEVMChainId(int $chainId) impure inline_ref {
    return ( (( (( (( (($chainId == 1)) ? (true) : (($chainId == 137)) )) ? (true) : (($chainId == 56)) )) ? (true) : (($chainId == 8453)) )) ? (true) : (($chainId == 42161)) );
}

int $global_calculateEVMGasPrice(int $chainId) impure inline_ref {
    if (($chainId == 1)) {
        return 20000000000;
    } elseif (($chainId == 137)) {
        return 30000000000;
    } elseif (($chainId == 56)) {
        return 5000000000;
    } elseif (($chainId == 8453)) {
        return 1000000000;
    } elseif (($chainId == 42161)) {
        return 100000000;
    } else {
        return 20000000000;
    }
}

tuple $global_getEVMChainConfig(int $chainId) impure inline_ref {
    if (($chainId == 1)) {
        return $EVMChainConfig$_as_optional($EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(1, $Builder$_fun_endCell($global_beginCell()), 12, 300000, true, $Builder$_fun_endCell($global_beginCell()), $Builder$_fun_endCell($global_beginCell())));
    } elseif (($chainId == 137)) {
        return $EVMChainConfig$_as_optional($EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(137, $Builder$_fun_endCell($global_beginCell()), 2, 300000, true, $Builder$_fun_endCell($global_beginCell()), $Builder$_fun_endCell($global_beginCell())));
    } elseif (($chainId == 56)) {
        return $EVMChainConfig$_as_optional($EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(56, $Builder$_fun_endCell($global_beginCell()), 3, 300000, true, $Builder$_fun_endCell($global_beginCell()), $Builder$_fun_endCell($global_beginCell())));
    } elseif (($chainId == 8453)) {
        return $EVMChainConfig$_as_optional($EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(8453, $Builder$_fun_endCell($global_beginCell()), 2, 300000, true, $Builder$_fun_endCell($global_beginCell()), $Builder$_fun_endCell($global_beginCell())));
    } elseif (($chainId == 42161)) {
        return $EVMChainConfig$_as_optional($EVMChainConfig$_constructor_chainId_rpcEndpoint_blockTime_gasLimit_isActive_bridgeAddress_oracleAddress(42161, $Builder$_fun_endCell($global_beginCell()), 1, 300000, true, $Builder$_fun_endCell($global_beginCell()), $Builder$_fun_endCell($global_beginCell())));
    }
    return null();
}

int $global_calculateEVMBridgeFee(int $amount, int $sourceChainId, int $targetChainId) impure inline_ref {
    int $baseFee = 1000000;
    int $percentageFee = (($amount * 1) / 10000);
    if (( (($sourceChainId == -3)) ? (true) : (($sourceChainId == -239)) )) {
        if ($global_isValidEVMChainId($targetChainId)) {
            return (($baseFee + $percentageFee) + 5000000);
        }
    } elseif ($global_isValidEVMChainId($sourceChainId)) {
        if (( (($targetChainId == -3)) ? (true) : (($targetChainId == -239)) )) {
            return (($baseFee + $percentageFee) + 3000000);
        }
    }
    return ($baseFee + $percentageFee);
}

int $global_priceOfJettonForward(int $fwdFee, int $fwdTonAmount) impure inline {
    return ((($fwdTonAmount + (2 * $fwdFee)) + $global_getForwardFee(40, 30000, false)) + ((2 * $global_getComputeFee(30000, false)) + 20000000));
}

cell $global_serializeOrderConfig((int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $secret) impure inline {
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    return $Builder$_fun_endCell(store_uint(store_uint(store_uint($Builder$_fun_storeBool($order'finalized, store_uint(store_uint(store_uint($Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeAddress(store_uint($global_beginCell(), $order'id, 32), $order'srcJettonAddress), $order'senderPubKey), $order'receiverPubKey), $order'hashlock, 256), $order'timelock, 32), $order'amount, 64)), $order'totalFilled, 64), $order'direction, 8), $secret, 256));
}

cell $global_serializeOrder((int, slice, slice, int, int, int, int, cell, int, int) $order, int $secret) impure inline {
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    return $Builder$_fun_endCell(store_uint(store_uint(store_uint($Builder$_fun_storeBool($order'finalized, store_uint(store_uint(store_uint($Builder$_fun_storeAddress($Builder$_fun_storeAddress(store_uint($global_beginCell(), $order'id, 32), $order'srcJettonAddress), $order'senderPubKey), $order'hashlock, 256), $order'timelock, 32), $order'amount, 64)), $order'totalFilled, 64), $order'direction, 8), $secret, 256));
}

int $global_findBridgeForChain(int $chainId) impure inline_ref {
    if ($global_isValidEVMChainId($chainId)) {
        return 1;
    }
    return null();
}

int $global_calculateEVMDynamicGasLimit(int $chainId, int $amount, int $isContractCall) impure inline_ref {
    int $baseGas = 300000;
    ifnot ($isContractCall) {
        $baseGas = 21000;
    }
    int $amountGasMultiplier = 100;
    if (($amount > 1000000000000000000000)) {
        $amountGasMultiplier = 110;
    } elseif (($amount > 100000000000000000000)) {
        $amountGasMultiplier = 105;
    }
    int $chainGasMultiplier = 100;
    if (($chainId == 1)) {
        $chainGasMultiplier = 115;
    } elseif (($chainId == 137)) {
        $chainGasMultiplier = 75;
    } elseif (($chainId == 56)) {
        $chainGasMultiplier = 65;
    } elseif (($chainId == 8453)) {
        $chainGasMultiplier = 80;
    } elseif (($chainId == 42161)) {
        $chainGasMultiplier = 70;
    }
    int $calculatedGas = ((($baseGas * $amountGasMultiplier) * $chainGasMultiplier) / 10000);
    int $finalGas = (($calculatedGas * 120) / 100);
    if (($finalGas < 21000)) {
        $finalGas = 21000;
    }
    if (($finalGas > 300000)) {
        $finalGas = 300000;
    }
    return $finalGas;
}

(int, int, int, int, int, int, int) $global_createEnhancedEVMCrossChainMessage(int $targetChainId, cell $targetContract, int $functionSelector, cell $parameters, int $amount, int $value) impure inline_ref {
    int $estimatedGasLimit = $global_calculateEVMDynamicGasLimit($targetChainId, $amount, true);
    int $currentTimestamp = 0;
    int $messageNonce = 0;
    return $CrossChainMessage$_constructor_sourceChain_targetChain_orderHash_amount_secret_timestamp_nonce(-3, $targetChainId, 0, $amount, 0, $currentTimestamp, $messageNonce);
}

int $global_validateEnhancedEVMMessageFormat(cell $message, int $chainId) impure inline_ref {
    ifnot ($global_isValidEVMChainId($chainId)) {
        return false;
    }
    return true;
}

int $global_calculateOptimalEVMGasPrice(int $chainId, int $priority) impure inline_ref {
    int $baseGasPrice = $global_calculateEVMGasPrice($chainId);
    int $priorityMultiplier = 100;
    ifnot ($priority) {
        $priorityMultiplier = 85;
    } elseif (($priority == 1)) {
        $priorityMultiplier = 100;
    } elseif (($priority == 2)) {
        $priorityMultiplier = 140;
    }
    int $chainMultiplier = 100;
    if (($chainId == 1)) {
        $chainMultiplier = 110;
    } elseif (($chainId == 137)) {
        $chainMultiplier = 85;
    } elseif (($chainId == 56)) {
        $chainMultiplier = 65;
    } elseif (($chainId == 8453)) {
        $chainMultiplier = 75;
    } elseif (($chainId == 42161)) {
        $chainMultiplier = 55;
    }
    int $calculatedGasPrice = ((($baseGasPrice * $priorityMultiplier) * $chainMultiplier) / 10000);
    int $finalGasPrice = (($calculatedGasPrice * 110) / 100);
    int $minGasPrice = 1000000000;
    if (($finalGasPrice < $minGasPrice)) {
        $finalGasPrice = $minGasPrice;
    }
    int $maxGasPrice = 1000000000000;
    if (($finalGasPrice > $maxGasPrice)) {
        $finalGasPrice = $maxGasPrice;
    }
    return $finalGasPrice;
}

() $global_sendCrossChainMessage(int $chainId, cell $message, int $retryCount) impure inline_ref {
    throw_unless(88, $global_isValidEVMChainId($chainId));
    throw_unless(109, $global_validateEnhancedEVMMessageFormat($message, $chainId));
    throw_if(107, ($retryCount >= 3));
}

int $global_isEscrowDeployed(int $chainId, cell $escrowContracts) impure inline_ref {
    ifnot ($global_isValidEVMChainId($chainId)) {
        return false;
    }
    tuple $escrow = $EscrowContract$_load_opt(__tact_dict_get_uint_cell($escrowContracts, 32, $chainId));
    if (null?($escrow)) {
        return false;
    }
    return $EscrowContract$_get_deployed($EscrowContract$_not_null($escrow));
}

cell $global_buildEVMTransferMessage((int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref {
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    cell $message = $Builder$_fun_endCell(store_uint(store_uint(store_uint(store_uint(store_uint($Builder$_fun_storeRef($Builder$_fun_endCell($Builder$_fun_storeAddress($global_beginCell(), $order'srcJettonAddress)), $Builder$_fun_storeRef($Builder$_fun_endCell($Builder$_fun_storeAddress($global_beginCell(), $order'receiverPubKey)), $Builder$_fun_storeRef($Builder$_fun_endCell($Builder$_fun_storeAddress($global_beginCell(), $order'senderPubKey)), store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint(store_uint($global_beginCell(), 305419896, 32), $order'id, 256), $order'hashlock, 256), $order'timelock, 64), $amount, 64), $secret, 256), $order'direction, 8), 0, 24)))), ($order'finalized ? 1 : 0), 1), $order'totalFilled, 64), 0, 191), 0, 64), 0, 64));
    return $message;
}

int $global_validateMessageAuthenticity(cell $message, int $sourceChain) impure inline_ref {
    ifnot ($global_isValidEVMChainId($sourceChain)) {
        return false;
    }
    if (__tact_cell_eq($message, $Builder$_fun_endCell($global_beginCell()))) {
        return false;
    }
    return true;
}

int $global_validateMessageIntegrity(cell $message) impure inline_ref {
    if (__tact_cell_eq($message, $Builder$_fun_endCell($global_beginCell()))) {
        return false;
    }
    return true;
}

int $global_validateSourceChain(int $sourceChain, int $targetChain) impure inline_ref {
    ifnot ($global_isValidEVMChainId($sourceChain)) {
        return false;
    }
    if (($sourceChain == $targetChain)) {
        return false;
    }
    if (( (($sourceChain == 0)) ? (true) : (($targetChain == 0)) )) {
        return false;
    }
    return true;
}

int $global_validateBridgeOperator(slice $bridgeOperator, int $sourceChain) impure inline_ref {
    if (( equal_slices_bits($bridgeOperator, $global_createZeroAddress()) )) {
        return false;
    }
    return true;
}

int $global_validateEnhancedMessage(cell $message, int $sourceChain, int $targetChain, slice $bridgeOperator) impure inline_ref {
    ifnot ($global_validateMessageAuthenticity($message, $sourceChain)) {
        return false;
    }
    ifnot ($global_validateMessageIntegrity($message)) {
        return false;
    }
    ifnot ($global_validateSourceChain($sourceChain, $targetChain)) {
        return false;
    }
    ifnot ($global_validateBridgeOperator($bridgeOperator, $sourceChain)) {
        return false;
    }
    return true;
}

int $global_validateReplayProtection(cell $message, int $nonce, int $timestamp, cell $processedNonces) impure inline_ref {
    if (($nonce <= 0)) {
        return false;
    }
    int $currentTime = 0;
    if (($timestamp > ($currentTime + 300))) {
        return false;
    }
    if (($timestamp < ($currentTime - 3600))) {
        return false;
    }
    if (__tact_int_eq_nullable_left(__tact_dict_get_int_int($processedNonces, 257, $nonce, 1), true)) {
        return false;
    }
    return true;
}

int $global_calculateSecureGasEstimation(int $chainId, int $amount, int $isContractCall) impure inline_ref {
    int $baseGas = $global_calculateEVMDynamicGasLimit($chainId, $amount, $isContractCall);
    int $securityBuffer = (($baseGas * 110) / 100);
    if (($securityBuffer < 21000)) {
        $securityBuffer = 21000;
    }
    return $securityBuffer;
}

int $global_handleGasPriceFluctuations(int $chainId, int $baseGasPrice, int $priority) impure inline_ref {
    int $optimalGasPrice = $global_calculateOptimalEVMGasPrice($chainId, $priority);
    int $priorityMultiplier = 100;
    if (($priority == 1)) {
        $priorityMultiplier = 80;
    } elseif (($priority == 2)) {
        $priorityMultiplier = 100;
    } elseif (($priority == 3)) {
        $priorityMultiplier = 120;
    }
    return (($optimalGasPrice * $priorityMultiplier) / 100);
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_create((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'jetton, $msg'customPayload) = $LockJetton$_load_not_mut($payload.begin_parse());
    throw_if(87, __tact_int_eq_nullable_left(__tact_dict_get_slice_int($self'whiteLists, 267, __tact_context_get_sender(), 1), true));
    throw_if(75, ($global_now() >= $msg'orderConfig'timelock));
    throw_if(90, (~ null?($OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'orderConfig'hashlock)))));
    $msg'orderConfig'direction = 0;
    $self'jettons~__tact_dict_set_slice_cell(267, $msg'orderConfig'srcJettonAddress, $msg'jetton);
    $self'jettonAccount~__tact_dict_set_slice_slice(267, $msg'orderConfig'srcJettonAddress, __tact_context_get_sender());
    $self'escrowLock~__tact_dict_set_uint_cell(256, $msg'orderConfig'hashlock, $OrderConfig$_store_cell(($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), begin_cell()));
    $self'totalOrders = ($self'totalOrders + 1);
    $self'totalVolume = ($self'totalVolume + $msg'orderConfig'amount);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_makeOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'jetton, $msg'customPayload) = $CreateOrder$_load_not_mut($payload.begin_parse());
    throw_if(87, __tact_int_eq_nullable_left(__tact_dict_get_slice_int($self'whiteLists, 267, __tact_context_get_sender(), 1), true));
    throw_if(75, ($global_now() >= $msg'orderConfig'timelock));
    throw_if(90, (~ null?($Order$_load_opt(__tact_dict_get_uint_cell($self'escrowOrder, 256, $msg'orderConfig'hashlock)))));
    $msg'orderConfig'direction = 2;
    $self'jettons~__tact_dict_set_slice_cell(267, $msg'orderConfig'srcJettonAddress, $msg'jetton);
    $self'jettonAccount~__tact_dict_set_slice_slice(267, $msg'orderConfig'srcJettonAddress, __tact_context_get_sender());
    $self'escrowOrder~__tact_dict_set_uint_cell(256, $msg'orderConfig'hashlock, $Order$_store_cell(($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), begin_cell()));
    $self'totalOrders = ($self'totalOrders + 1);
    $self'totalVolume = ($self'totalVolume + $msg'orderConfig'amount);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_createEVMToTONOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'evmContractAddress, $msg'customPayload) = $CreateEVMToTONOrder$_load_not_mut($payload.begin_parse());
    throw_if(87, __tact_int_eq_nullable_left(__tact_dict_get_slice_int($self'whiteLists, 267, __tact_context_get_sender(), 1), true));
    throw_if(75, ($global_now() >= $msg'orderConfig'timelock));
    throw_if(90, (~ null?($OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'orderConfig'hashlock)))));
    $msg'orderConfig'direction = 1;
    $self'escrowLock~__tact_dict_set_uint_cell(256, $msg'orderConfig'hashlock, $OrderConfig$_store_cell(($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), begin_cell()));
    $self'totalOrders = ($self'totalOrders + 1);
    $self'totalVolume = ($self'totalVolume + $msg'orderConfig'amount);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_createTONToEVMOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, cell $payload) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'evmContractAddress, $msg'customPayload) = $CreateTONToEVMOrder$_load_not_mut($payload.begin_parse());
    throw_if(87, __tact_int_eq_nullable_left(__tact_dict_get_slice_int($self'whiteLists, 267, __tact_context_get_sender(), 1), true));
    throw_if(75, ($global_now() >= $msg'orderConfig'timelock));
    throw_if(90, (~ null?($OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'orderConfig'hashlock)))));
    $msg'orderConfig'direction = 0;
    $self'escrowLock~__tact_dict_set_uint_cell(256, $msg'orderConfig'hashlock, $OrderConfig$_store_cell(($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), begin_cell()));
    $self'totalOrders = ($self'totalOrders + 1);
    $self'totalVolume = ($self'totalVolume + $msg'orderConfig'amount);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_partialFill((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int, int, slice, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'orderHash, $msg'secret, $msg'fillAmount, $msg'resolver, $msg'customPayload)) = $msg;
    tuple $orderConfigData = $OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'orderHash));
    if ((~ null?($orderConfigData))) {
        var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $OrderConfig$_not_null($orderConfigData);
        throw_if(91, $order'finalized);
        throw_if(103, ($msg'fillAmount > ($order'amount - $order'totalFilled)));
        throw_if(104, (~ null?(__tact_dict_get_uint_uint($order'partialFills, 256, $msg'secret, 64))));
        $order'partialFills~__tact_dict_set_uint_uint(256, $msg'secret, $msg'fillAmount, 64);
        $order'totalFilled = ($order'totalFilled + $msg'fillAmount);
        tuple $relayerData = $RelayerData$_load_opt(__tact_dict_get_slice_cell($self'relayers, 267, $msg'resolver));
        if ((~ null?($relayerData))) {
            var ($updatedRelayer'address, $updatedRelayer'whitelisted, $updatedRelayer'totalResolves, $updatedRelayer'successRate) = $RelayerData$_constructor_address_whitelisted_totalResolves_successRate($RelayerData$_get_address($RelayerData$_not_null($relayerData)), $RelayerData$_get_whitelisted($RelayerData$_not_null($relayerData)), ($RelayerData$_get_totalResolves($RelayerData$_not_null($relayerData)) + 1), $RelayerData$_get_successRate($RelayerData$_not_null($relayerData)));
            $self'relayers~__tact_dict_set_slice_cell(267, $msg'resolver, $RelayerData$_store_cell(($updatedRelayer'address, $updatedRelayer'whitelisted, $updatedRelayer'totalResolves, $updatedRelayer'successRate), begin_cell()));
        }
        $self'totalResolves = ($self'totalResolves + 1);
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
    }
    tuple $orderData = $Order$_load_opt(__tact_dict_get_uint_cell($self'escrowOrder, 256, $msg'orderHash));
    if ((~ null?($orderData))) {
        var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $Order$_not_null($orderData);
        throw_if(91, $order'finalized);
        throw_if(103, ($msg'fillAmount > ($order'amount - $order'totalFilled)));
        throw_if(104, (~ null?(__tact_dict_get_uint_uint($order'partialFills, 256, $msg'secret, 64))));
        $order'partialFills~__tact_dict_set_uint_uint(256, $msg'secret, $msg'fillAmount, 64);
        $order'totalFilled = ($order'totalFilled + $msg'fillAmount);
        tuple $relayerData = $RelayerData$_load_opt(__tact_dict_get_slice_cell($self'relayers, 267, $msg'resolver));
        if ((~ null?($relayerData))) {
            var ($updatedRelayer'address, $updatedRelayer'whitelisted, $updatedRelayer'totalResolves, $updatedRelayer'successRate) = $RelayerData$_constructor_address_whitelisted_totalResolves_successRate($RelayerData$_get_address($RelayerData$_not_null($relayerData)), $RelayerData$_get_whitelisted($RelayerData$_not_null($relayerData)), ($RelayerData$_get_totalResolves($RelayerData$_not_null($relayerData)) + 1), $RelayerData$_get_successRate($RelayerData$_not_null($relayerData)));
            $self'relayers~__tact_dict_set_slice_cell(267, $msg'resolver, $RelayerData$_store_cell(($updatedRelayer'address, $updatedRelayer'whitelisted, $updatedRelayer'totalResolves, $updatedRelayer'successRate), begin_cell()));
        }
        $self'totalResolves = ($self'totalResolves + 1);
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
    }
    throw(88);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonTransfer((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    slice $jettonWallet = __tact_dict_get_slice_slice($self'jettonAccount, 267, $order'srcJettonAddress);
    var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $remainingValue = ($ctx'value - $global_priceOfJettonForward($Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw)), 1));
    $remainingValue = $global_min($remainingValue, 0);
    $global_message($MessageParameters$_constructor_to_value_mode_body(__tact_not_null($jettonWallet), 0, 64, $SendViaJettonTransfer$_store_cell($SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload(0, $amount, $order'receiverPubKey, $order'receiverPubKey, $remainingValue, $Cell$_fun_beginParse($Builder$_fun_endCell($Builder$_fun_storeRef($global_serializeOrderConfig(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $secret), $global_beginCell()))), null()), begin_cell())));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMCrossChainMessage((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, int, int, int, cell, int, int) $transaction, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $secret) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($transaction'chainId, $transaction'toContract, $transaction'functionSelector, $transaction'parameters, $transaction'gasLimit, $transaction'gasPrice, $transaction'value, $transaction'nonce, $transaction'status, $transaction'transactionHash, $transaction'blockNumber, $transaction'confirmations)) = $transaction;
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    var ($crossChainMsg'sourceChain, $crossChainMsg'targetChain, $crossChainMsg'orderHash, $crossChainMsg'amount, $crossChainMsg'secret, $crossChainMsg'timestamp, $crossChainMsg'nonce) = $global_createEnhancedEVMCrossChainMessage($transaction'chainId, $transaction'toContract, $transaction'functionSelector, $transaction'parameters, $order'amount, $transaction'value);
    $crossChainMsg'orderHash = $order'hashlock;
    $crossChainMsg'secret = $secret;
    $crossChainMsg'timestamp = 0;
    $crossChainMsg'nonce = $self'evmTransactionNonce;
    throw_unless(109, $global_validateEnhancedEVMMessageFormat($CrossChainMessage$_store_cell(($crossChainMsg'sourceChain, $crossChainMsg'targetChain, $crossChainMsg'orderHash, $crossChainMsg'amount, $crossChainMsg'secret, $crossChainMsg'timestamp, $crossChainMsg'nonce), begin_cell()), $transaction'chainId));
    int $bridgeId = $global_findBridgeForChain($transaction'chainId);
    throw_if(89, null?($bridgeId));
    tuple $bridge = $EVMBridgeData$_load_opt(__tact_dict_get_uint_cell($self'evmBridges, 32, __tact_not_null($bridgeId)));
    throw_if(89, null?($bridge));
    throw_unless(107, $EVMBridgeData$_get_isActive($EVMBridgeData$_not_null($bridge)));
    throw_if(72, ( (($order'amount < $EVMBridgeData$_get_minTransferAmount($EVMBridgeData$_not_null($bridge)))) ? (true) : (($order'amount > $EVMBridgeData$_get_maxTransferAmount($EVMBridgeData$_not_null($bridge)))) ));
    $global_sendCrossChainMessage($transaction'chainId, $CrossChainMessage$_store_cell(($crossChainMsg'sourceChain, $crossChainMsg'targetChain, $crossChainMsg'orderHash, $crossChainMsg'amount, $crossChainMsg'secret, $crossChainMsg'timestamp, $crossChainMsg'nonce), begin_cell()), 0);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processEVMTransfer((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    throw_unless(109, $global_validateEnhancedMessage($global_buildEVMTransferMessage(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $amount, $secret), -3, $order'id, $global_createZeroAddress()));
    throw_unless(88, $global_isValidEVMChainId($order'id));
    throw_unless(106, $global_isEscrowDeployed($order'id, $self'escrowContracts));
    throw_unless(109, $global_validateReplayProtection($global_buildEVMTransferMessage(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $amount, $secret), $self'evmTransactionNonce, 0, null()));
    tuple $chainConfig = $EVMChainConfig$_load_opt(__tact_dict_get_uint_cell($self'evmChainConfigs, 32, $order'id));
    if (null?($chainConfig)) {
        tuple $defaultConfig = $global_getEVMChainConfig($order'id);
        throw_if(88, null?($defaultConfig));
        $self'evmChainConfigs~__tact_dict_set_uint_cell(32, $order'id, $EVMChainConfig$_store_cell($EVMChainConfig$_not_null($defaultConfig), begin_cell()));
    }
    cell $message = $global_buildEVMTransferMessage(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $amount, $secret);
    throw_unless(109, $global_validateEnhancedEVMMessageFormat($message, $order'id));
    int $secureGasLimit = $global_calculateSecureGasEstimation($order'id, $amount, true);
    int $optimalGasPrice = $global_handleGasPriceFluctuations($order'id, $global_calculateOptimalEVMGasPrice($order'id, 2), 2);
    int $bridgeFee = $global_calculateEVMBridgeFee($amount, -3, $order'id);
    $self'evmBridgeFees = ($self'evmBridgeFees + $bridgeFee);
    var ($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations) = $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations($order'id, $Builder$_fun_endCell($global_beginCell()), 2835717307, $Builder$_fun_endCell(store_uint($Builder$_fun_storeAddress($global_beginCell(), $order'receiverPubKey), $amount, 256)), $secureGasLimit, $optimalGasPrice, 0, $self'evmTransactionNonce, 0, $Builder$_fun_endCell($global_beginCell()), 0, 0);
    $self'evmTransactionNonce = ($self'evmTransactionNonce + 1);
    $self'evmTransactions~__tact_dict_set_uint_cell(64, $evmTransaction'nonce, $EVMTransaction$_store_cell(($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations), begin_cell()));
    ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_sendEVMCrossChainMessage(($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations), ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $secret);
    $order'finalized = true;
    $self'escrowLock~__tact_dict_set_uint_cell(256, $order'hashlock, $OrderConfig$_store_cell(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), begin_cell()));
    $self'totalResolves = ($self'totalResolves + 1);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonTransferOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, int, int, int, int, cell, int, int) $order, int $amount, int $secret) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    slice $jettonWallet = __tact_dict_get_slice_slice($self'jettonAccount, 267, $order'srcJettonAddress);
    var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $remainingValue = ($ctx'value - $global_priceOfJettonForward($Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw)), 1));
    $remainingValue = $global_min($remainingValue, 0);
    $global_message($MessageParameters$_constructor_to_value_mode_body(__tact_not_null($jettonWallet), 0, 64, $SendViaJettonTransfer$_store_cell($SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload(0, $amount, $order'senderPubKey, $order'senderPubKey, $remainingValue, $Cell$_fun_beginParse($Builder$_fun_endCell($Builder$_fun_storeRef($global_serializeOrder(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $secret), $global_beginCell()))), null()), begin_cell())));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_completePartialFill((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'orderHash, $msg'secret)) = $msg;
    tuple $orderConfigData = $OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'orderHash));
    if ((~ null?($orderConfigData))) {
        var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $OrderConfig$_not_null($orderConfigData);
        int $fillAmount = __tact_dict_get_uint_uint($order'partialFills, 256, $msg'secret, 64);
        throw_if(95, null?($fillAmount));
        if (( (($order'direction == 0)) ? (true) : (($order'direction == 2)) )) {
            ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processJettonTransfer(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), __tact_not_null($fillAmount), $msg'secret);
        } else {
            ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processEVMTransfer(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), __tact_not_null($fillAmount), $msg'secret);
        }
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
    }
    tuple $orderData = $Order$_load_opt(__tact_dict_get_uint_cell($self'escrowOrder, 256, $msg'orderHash));
    if ((~ null?($orderData))) {
        var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $Order$_not_null($orderData);
        int $fillAmount = __tact_dict_get_uint_uint($order'partialFills, 256, $msg'secret, 64);
        throw_if(95, null?($fillAmount));
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processJettonTransferOrder(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), __tact_not_null($fillAmount), $msg'secret);
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
    }
    throw(88);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_getFund((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'secret, $msg'hash, $msg'customPayload)) = $msg;
    tuple $data = $OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'hash));
    throw_if(88, null?($data));
    var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $OrderConfig$_not_null($data);
    int $secretHash = $global_keccakBytes32($msg'secret);
    throw_if(75, ($global_now() > $order'timelock));
    throw_if(91, $order'finalized);
    throw_if(89, ($secretHash != $order'hashlock));
    $order'finalized = true;
    ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processJettonTransfer(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), $order'amount, $msg'secret);
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonRefund((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, slice, int, int, int, int, cell, int, int) $order) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    slice $jettonWallet = __tact_dict_get_slice_slice($self'jettonAccount, 267, $order'srcJettonAddress);
    var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $remainingValue = ($ctx'value - $global_priceOfJettonForward($Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw)), 1));
    $remainingValue = $global_min($remainingValue, 0);
    $global_message($MessageParameters$_constructor_to_value_mode_body(__tact_not_null($jettonWallet), 0, 64, $SendViaJettonTransfer$_store_cell($SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload(0, $order'amount, $order'senderPubKey, $order'senderPubKey, $remainingValue, $Cell$_fun_beginParse($Builder$_fun_endCell($Builder$_fun_storeRef($global_serializeOrderConfig(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), 0), $global_beginCell()))), null()), begin_cell())));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_refund((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'hash, $msg'customPayload)) = $msg;
    tuple $data = $OrderConfig$_load_opt(__tact_dict_get_uint_cell($self'escrowLock, 256, $msg'hash));
    throw_if(88, null?($data));
    var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $OrderConfig$_not_null($data);
    throw_if(80, ($global_now() < $order'timelock));
    throw_if(91, $order'finalized);
    $order'finalized = true;
    ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processJettonRefund($OrderConfig$_tensor_cast(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'receiverPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processJettonRefundOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, slice, int, int, int, int, cell, int, int) $order) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)) = $order;
    slice $jettonWallet = __tact_dict_get_slice_slice($self'jettonAccount, 267, $order'srcJettonAddress);
    var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $remainingValue = ($ctx'value - $global_priceOfJettonForward($Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw)), 1));
    $remainingValue = $global_min($remainingValue, 0);
    $global_message($MessageParameters$_constructor_to_value_mode_body(__tact_not_null($jettonWallet), 0, 64, $SendViaJettonTransfer$_store_cell($SendViaJettonTransfer$_constructor_queryId_amount_responseDestination_destination_forwardTonAmount_forwardPayload_customPayload(0, $order'amount, $order'senderPubKey, $order'senderPubKey, $remainingValue, $Cell$_fun_beginParse($Builder$_fun_endCell($Builder$_fun_storeRef($global_serializeOrder(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction), 0), $global_beginCell()))), null()), begin_cell())));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_refundOrder((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'hash, $msg'customPayload)) = $msg;
    tuple $data = $Order$_load_opt(__tact_dict_get_uint_cell($self'escrowOrder, 256, $msg'hash));
    throw_if(88, null?($data));
    var ($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction) = $Order$_not_null($data);
    throw_if(80, ($global_now() < $order'timelock));
    throw_if(91, $order'finalized);
    $order'finalized = true;
    ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processJettonRefundOrder($Order$_tensor_cast(($order'id, $order'srcJettonAddress, $order'senderPubKey, $order'hashlock, $order'timelock, $order'amount, $order'finalized, $order'partialFills, $order'totalFilled, $order'direction)));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_deployEscrow((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'chainId, $msg'targetAddress, $msg'customPayload)) = $msg;
    throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
    var ($escrowContract'chainId, $escrowContract'contractAddress, $escrowContract'deployed, $escrowContract'totalOrders) = $EscrowContract$_constructor_chainId_contractAddress_deployed_totalOrders($msg'chainId, $msg'targetAddress, true, 0);
    $self'escrowContracts~__tact_dict_set_uint_cell(32, $msg'chainId, $EscrowContract$_store_cell(($escrowContract'chainId, $escrowContract'contractAddress, $escrowContract'deployed, $escrowContract'totalOrders), begin_cell()));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_updateRelayerStats((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (slice, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'relayer, $msg'success, $msg'customPayload)) = $msg;
    tuple $relayerData = $RelayerData$_load_opt(__tact_dict_get_slice_cell($self'relayers, 267, $msg'relayer));
    throw_if(96, null?($relayerData));
    int $newTotalResolves = ($RelayerData$_get_totalResolves($RelayerData$_not_null($relayerData)) + 1);
    int $newSuccessRate = $RelayerData$_get_successRate($RelayerData$_not_null($relayerData));
    if ($msg'success) {
        $newSuccessRate = $global_min(($RelayerData$_get_successRate($RelayerData$_not_null($relayerData)) + 1), 100);
    } else {
        $newSuccessRate = $global_max(($RelayerData$_get_successRate($RelayerData$_not_null($relayerData)) - 1), 0);
    }
    var ($updatedRelayer'address, $updatedRelayer'whitelisted, $updatedRelayer'totalResolves, $updatedRelayer'successRate) = $RelayerData$_constructor_address_whitelisted_totalResolves_successRate($RelayerData$_get_address($RelayerData$_not_null($relayerData)), $RelayerData$_get_whitelisted($RelayerData$_not_null($relayerData)), $newTotalResolves, $newSuccessRate);
    $self'relayers~__tact_dict_set_slice_cell(267, $msg'relayer, $RelayerData$_store_cell(($updatedRelayer'address, $updatedRelayer'whitelisted, $updatedRelayer'totalResolves, $updatedRelayer'successRate), begin_cell()));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), int) $TonFusion$_fun_findBridgeForChain((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, int $chainId) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    if (($chainId == 1)) {
        var $fresh$ret_0 = 1;
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), $fresh$ret_0);
    } elseif (($chainId == 137)) {
        var $fresh$ret_1 = 2;
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), $fresh$ret_1);
    } elseif (($chainId == 56)) {
        var $fresh$ret_2 = 3;
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), $fresh$ret_2);
    } elseif (($chainId == 8453)) {
        var $fresh$ret_3 = 4;
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), $fresh$ret_3);
    } elseif (($chainId == 42161)) {
        var $fresh$ret_4 = 5;
        return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), $fresh$ret_4);
    }
    var $fresh$ret_5 = null();
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), $fresh$ret_5);
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_handleEVMBridgeConfirmation((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'bridgeId, $msg'transactionHash, $msg'blockNumber, $msg'confirmations, $msg'customPayload)) = $msg;
    tuple $bridge = $EVMBridgeData$_load_opt(__tact_dict_get_uint_cell($self'evmBridges, 32, $msg'bridgeId));
    throw_if(89, null?($bridge));
    if (($msg'confirmations >= 12)) {
    }
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_handleEVMOraclePriceUpdate((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, slice, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'oracleId, $msg'tokenAddress, $msg'price, $msg'timestamp, $msg'customPayload)) = $msg;
    tuple $oracle = $EVMOracleData$_load_opt(__tact_dict_get_uint_cell($self'evmOracles, 32, $msg'oracleId));
    throw_if(90, null?($oracle));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_handleEVMChainValidation((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'chainId, $msg'blockNumber, $msg'gasPrice, $msg'customPayload)) = $msg;
    throw_unless(88, $global_isValidEVMChainId($msg'chainId));
    tuple $chainConfig = $EVMChainConfig$_load_opt(__tact_dict_get_uint_cell($self'evmChainConfigs, 32, $msg'chainId));
    if ((~ null?($chainConfig))) {
    }
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMCrossChainMessageToBridge((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'targetChainId, $msg'targetContract, $msg'functionSelector, $msg'parameters, $msg'gasLimit, $msg'value, $msg'customPayload)) = $msg;
    int $bridgeId = ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_findBridgeForChain($msg'targetChainId);
    throw_if(89, null?($bridgeId));
    tuple $bridge = $EVMBridgeData$_load_opt(__tact_dict_get_uint_cell($self'evmBridges, 32, __tact_not_null($bridgeId)));
    throw_if(89, null?($bridge));
    $global_message($MessageParameters$_constructor_to_value_mode_body($EVMBridgeData$_get_bridgeContract($EVMBridgeData$_not_null($bridge)), 100000000, 64, $EVMCrossChainMessage$_store_cell(($msg'targetChainId, $msg'targetContract, $msg'functionSelector, $msg'parameters, $msg'gasLimit, $msg'value, $msg'customPayload), begin_cell())));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processEVMCrossChainMessage((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'targetChainId, $msg'targetContract, $msg'functionSelector, $msg'parameters, $msg'gasLimit, $msg'value, $msg'customPayload)) = $msg;
    throw_if(93, ($msg'gasLimit > 300000));
    var ($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations) = $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations($msg'targetChainId, $msg'targetContract, $msg'functionSelector, $msg'parameters, $msg'gasLimit, $global_calculateEVMGasPrice($msg'targetChainId), $msg'value, $self'evmTransactionNonce, 0, $Builder$_fun_endCell($global_beginCell()), 0, 0);
    $self'evmTransactionNonce = ($self'evmTransactionNonce + 1);
    $self'evmTransactions~__tact_dict_set_uint_cell(64, $evmTransaction'nonce, $EVMTransaction$_store_cell(($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations), begin_cell()));
    ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_sendEVMCrossChainMessageToBridge($EVMCrossChainMessage$_tensor_cast(($msg'targetChainId, $msg'targetContract, $msg'functionSelector, $msg'parameters, $msg'gasLimit, $msg'value, $msg'customPayload)));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMContractDeployToBridge((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, cell, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'targetChainId, $msg'contractBytecode, $msg'constructorParams, $msg'gasLimit, $msg'value, $msg'customPayload)) = $msg;
    int $bridgeId = ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_findBridgeForChain($msg'targetChainId);
    throw_if(89, null?($bridgeId));
    tuple $bridge = $EVMBridgeData$_load_opt(__tact_dict_get_uint_cell($self'evmBridges, 32, __tact_not_null($bridgeId)));
    throw_if(89, null?($bridge));
    $global_message($MessageParameters$_constructor_to_value_mode_body($EVMBridgeData$_get_bridgeContract($EVMBridgeData$_not_null($bridge)), 100000000, 64, $EVMContractDeploy$_store_cell(($msg'targetChainId, $msg'contractBytecode, $msg'constructorParams, $msg'gasLimit, $msg'value, $msg'customPayload), begin_cell())));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_processEVMContractDeploy((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, cell, int, int, cell) $msg) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($msg'targetChainId, $msg'contractBytecode, $msg'constructorParams, $msg'gasLimit, $msg'value, $msg'customPayload)) = $msg;
    throw_if(93, ($msg'gasLimit > 500000));
    var ($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations) = $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations($msg'targetChainId, $Builder$_fun_endCell($global_beginCell()), 0, $msg'constructorParams, $msg'gasLimit, $global_calculateEVMGasPrice($msg'targetChainId), $msg'value, $self'evmTransactionNonce, 0, $Builder$_fun_endCell($global_beginCell()), 0, 0);
    $self'evmTransactionNonce = ($self'evmTransactionNonce + 1);
    $self'evmTransactions~__tact_dict_set_uint_cell(64, $evmTransaction'nonce, $EVMTransaction$_store_cell(($evmTransaction'chainId, $evmTransaction'toContract, $evmTransaction'functionSelector, $evmTransaction'parameters, $evmTransaction'gasLimit, $evmTransaction'gasPrice, $evmTransaction'value, $evmTransaction'nonce, $evmTransaction'status, $evmTransaction'transactionHash, $evmTransaction'blockNumber, $evmTransaction'confirmations), begin_cell()));
    ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_sendEVMContractDeployToBridge($EVMContractDeploy$_tensor_cast(($msg'targetChainId, $msg'contractBytecode, $msg'constructorParams, $msg'gasLimit, $msg'value, $msg'customPayload)));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int), ()) $TonFusion$_fun_sendEVMTransactionRetryToBridge((slice, cell, cell, cell, cell, cell, cell, cell, int, int, int, cell, cell, cell, cell, int, int) $self, (int, cell, int, cell, int, int, int, int, int, cell, int, int) $transaction) impure inline_ref {
    var (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)) = $self;
    var (($transaction'chainId, $transaction'toContract, $transaction'functionSelector, $transaction'parameters, $transaction'gasLimit, $transaction'gasPrice, $transaction'value, $transaction'nonce, $transaction'status, $transaction'transactionHash, $transaction'blockNumber, $transaction'confirmations)) = $transaction;
    int $bridgeId = ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_findBridgeForChain($transaction'chainId);
    throw_if(89, null?($bridgeId));
    tuple $bridge = $EVMBridgeData$_load_opt(__tact_dict_get_uint_cell($self'evmBridges, 32, __tact_not_null($bridgeId)));
    throw_if(89, null?($bridge));
    cell $retryMsg = $Builder$_fun_endCell(store_uint(store_uint($Builder$_fun_storeRef($transaction'parameters, store_uint($Builder$_fun_storeRef($transaction'toContract, store_uint(store_uint(store_uint($global_beginCell(), 1247505533, 32), $transaction'nonce, 64), $transaction'gasPrice, 64)), $transaction'functionSelector, 32)), $transaction'gasLimit, 32), $transaction'value, 64));
    $global_message($MessageParameters$_constructor_to_value_mode_body($EVMBridgeData$_get_bridgeContract($EVMBridgeData$_not_null($bridge)), 100000000, 64, $retryMsg));
    return (($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees), ());
}

;;
;; Get methods of a Contract TonFusion
;;

;;
;; Routing of a Contract TonFusion
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees) = $TonFusion$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive SetWhiteList message
    if (op == 0xa985fdf8) {
        var $action'resolver = in_msg~load_msg_addr();
        var $action'whitelistStatus = in_msg~load_int(1);
        throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        $self'whiteLists~__tact_dict_set_slice_int(267, $action'resolver, $action'whitelistStatus, 1);
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive RegisterRelayer message
    if (op == 0x7362d09e) {
        var $action'relayer = in_msg~load_msg_addr();
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        var ($relayerData'address, $relayerData'whitelisted, $relayerData'totalResolves, $relayerData'successRate) = $RelayerData$_constructor_address_whitelisted_totalResolves_successRate($action'relayer, true, 0, 0);
        $self'relayers~__tact_dict_set_slice_cell(267, $action'relayer, $RelayerData$_store_cell(($relayerData'address, $relayerData'whitelisted, $relayerData'totalResolves, $relayerData'successRate), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive JettonNotifyWithActionRequest message
    if (op == 0x7362d09c) {
        var $action'queryId = in_msg~load_uint(64);
        var $action'amount = in_msg~load_varuint16();
        var $action'sender = in_msg~load_msg_addr();
        var $action'actionOpcode = in_msg~load_uint(32);
        var $action'actionPayload = in_msg~load_ref();
        if (($action'actionOpcode == 0xf512f7df)) {
            var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'jetton, $msg'customPayload) = $LockJetton$_load_not_mut($action'actionPayload.begin_parse());
            slice $wallet = $global_calculateJettonWalletAddress($action'sender, $msg'orderConfig'srcJettonAddress, $msg'jetton);
            if (( equal_slices_bits($wallet, __tact_context_get_sender()) )) {
                ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_create($action'actionPayload);
            } else {
                $global_cashback(__tact_context_get_sender());
                throw(86);
            }
        } elseif (($action'actionOpcode == 0x7362d09c)) {
            var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'jetton, $msg'customPayload) = $CreateOrder$_load_not_mut($action'actionPayload.begin_parse());
            slice $wallet = $global_calculateJettonWalletAddress($action'sender, $msg'orderConfig'srcJettonAddress, $msg'jetton);
            if (( equal_slices_bits($wallet, __tact_context_get_sender()) )) {
                ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_makeOrder($action'actionPayload);
            } else {
                $global_cashback(__tact_context_get_sender());
                throw(86);
            }
        } elseif (($action'actionOpcode == 0x8b341822)) {
            var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'evmContractAddress, $msg'customPayload) = $CreateEVMToTONOrder$_load_not_mut($action'actionPayload.begin_parse());
            ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_createEVMToTONOrder($action'actionPayload);
        } elseif (($action'actionOpcode == 0x62239978)) {
            var (($msg'orderConfig'id, $msg'orderConfig'srcJettonAddress, $msg'orderConfig'senderPubKey, $msg'orderConfig'receiverPubKey, $msg'orderConfig'hashlock, $msg'orderConfig'timelock, $msg'orderConfig'amount, $msg'orderConfig'finalized, $msg'orderConfig'partialFills, $msg'orderConfig'totalFilled, $msg'orderConfig'direction), $msg'evmContractAddress, $msg'customPayload) = $CreateTONToEVMOrder$_load_not_mut($action'actionPayload.begin_parse());
            ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_createTONToEVMOrder($action'actionPayload);
        } else {
            $global_cashback(__tact_context_get_sender());
        }
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive EVMCrossChainMessage message
    if (op == 0x9a8b7c6d) {
        var $action'targetChainId = in_msg~load_uint(32);
        var $action'targetContract = in_msg~load_ref();
        var $action'functionSelector = in_msg~load_uint(32);
        var $action'parameters = in_msg~load_ref();
        var $action'gasLimit = in_msg~load_uint(32);
        var $action'value = in_msg~load_uint(64);
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_unless(88, $global_isValidEVMChainId($action'targetChainId));
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processEVMCrossChainMessage($EVMCrossChainMessage$_tensor_cast(($action'targetChainId, $action'targetContract, $action'functionSelector, $action'parameters, $action'gasLimit, $action'value, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive EVMContractDeploy message
    if (op == 0x5e4f3d2c) {
        var $action'targetChainId = in_msg~load_uint(32);
        var $action'contractBytecode = in_msg~load_ref();
        var $action'constructorParams = in_msg~load_ref();
        var $action'gasLimit = in_msg~load_uint(32);
        var $action'value = in_msg~load_uint(64);
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_unless(88, $global_isValidEVMChainId($action'targetChainId));
        throw_if(93, ($action'gasLimit > 500000));
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_processEVMContractDeploy($EVMContractDeploy$_tensor_cast(($action'targetChainId, $action'contractBytecode, $action'constructorParams, $action'gasLimit, $action'value, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive EVMBridgeConfirmation message
    if (op == 0x1f2e3d4c) {
        var $action'bridgeId = in_msg~load_uint(32);
        var $action'transactionHash = in_msg~load_ref();
        var $action'blockNumber = in_msg~load_uint(64);
        var $action'confirmations = in_msg~load_uint(32);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_handleEVMBridgeConfirmation($EVMBridgeConfirmation$_tensor_cast(($action'bridgeId, $action'transactionHash, $action'blockNumber, $action'confirmations, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive EVMOraclePriceUpdate message
    if (op == 0x8c9d0e1f) {
        var $action'oracleId = in_msg~load_uint(32);
        var $action'tokenAddress = in_msg~load_msg_addr();
        var $action'price = in_msg~load_uint(64);
        var $action'timestamp = in_msg~load_uint(32);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_handleEVMOraclePriceUpdate($EVMOraclePriceUpdate$_tensor_cast(($action'oracleId, $action'tokenAddress, $action'price, $action'timestamp, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive EVMChainValidation message
    if (op == 0x2d3e4f5a) {
        var $action'chainId = in_msg~load_uint(32);
        var $action'blockNumber = in_msg~load_uint(64);
        var $action'gasPrice = in_msg~load_uint(64);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_handleEVMChainValidation($EVMChainValidation$_tensor_cast(($action'chainId, $action'blockNumber, $action'gasPrice, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive GetFund message
    if (op == 0x50635fd2) {
        var $action'secret = in_msg~load_uint(256);
        var $action'hash = in_msg~load_uint(256);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_getFund($GetFund$_tensor_cast(($action'secret, $action'hash, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive Refund message
    if (op == 0xe49e1dcb) {
        var $action'hash = in_msg~load_uint(256);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_refund($Refund$_tensor_cast(($action'hash, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive RefundOrder message
    if (op == 0x7362d09d) {
        var $action'hash = in_msg~load_uint(256);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_refundOrder($RefundOrder$_tensor_cast(($action'hash, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive PartialFill message
    if (op == 0x4ef5cb26) {
        var $action'orderHash = in_msg~load_uint(256);
        var $action'secret = in_msg~load_uint(256);
        var $action'fillAmount = in_msg~load_uint(64);
        var $action'resolver = in_msg~load_msg_addr();
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_partialFill($PartialFill$_tensor_cast(($action'orderHash, $action'secret, $action'fillAmount, $action'resolver, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive CompletePartialFill message
    if (op == 0x7a7b8c9d) {
        var $action'orderHash = in_msg~load_uint(256);
        var $action'secret = in_msg~load_uint(256);
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_completePartialFill($CompletePartialFill$_tensor_cast(($action'orderHash, $action'secret)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive DeployEscrow message
    if (op == 0x595f07bc) {
        var $action'chainId = in_msg~load_uint(32);
        var $action'targetAddress = in_msg~load_msg_addr();
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_deployEscrow($DeployEscrow$_tensor_cast(($action'chainId, $action'targetAddress, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive UpdateRelayerStats message
    if (op == 0x7362d09f) {
        var $action'relayer = in_msg~load_msg_addr();
        var $action'success = in_msg~load_int(1);
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_updateRelayerStats($UpdateRelayerStats$_tensor_cast(($action'relayer, $action'success, $action'customPayload)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive CreateEVMToTONOrder message
    if (op == 0x8b341822) {
        var ($action'orderConfig'id, $action'orderConfig'srcJettonAddress, $action'orderConfig'senderPubKey, $action'orderConfig'receiverPubKey, $action'orderConfig'hashlock, $action'orderConfig'timelock, $action'orderConfig'amount, $action'orderConfig'finalized, $action'orderConfig'partialFills, $action'orderConfig'totalFilled, $action'orderConfig'direction) = in_msg~$OrderConfig$_load();
        var $action'evmContractAddress = in_msg~load_ref();
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_createEVMToTONOrder($CreateEVMToTONOrder$_store_cell((($action'orderConfig'id, $action'orderConfig'srcJettonAddress, $action'orderConfig'senderPubKey, $action'orderConfig'receiverPubKey, $action'orderConfig'hashlock, $action'orderConfig'timelock, $action'orderConfig'amount, $action'orderConfig'finalized, $action'orderConfig'partialFills, $action'orderConfig'totalFilled, $action'orderConfig'direction), $action'evmContractAddress, $action'customPayload), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive CreateTONToEVMOrder message
    if (op == 0x62239978) {
        var ($action'orderConfig'id, $action'orderConfig'srcJettonAddress, $action'orderConfig'senderPubKey, $action'orderConfig'receiverPubKey, $action'orderConfig'hashlock, $action'orderConfig'timelock, $action'orderConfig'amount, $action'orderConfig'finalized, $action'orderConfig'partialFills, $action'orderConfig'totalFilled, $action'orderConfig'direction) = in_msg~$OrderConfig$_load();
        var $action'evmContractAddress = in_msg~load_ref();
        var $action'customPayload = in_msg~load_maybe_ref();
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_createTONToEVMOrder($CreateTONToEVMOrder$_store_cell((($action'orderConfig'id, $action'orderConfig'srcJettonAddress, $action'orderConfig'senderPubKey, $action'orderConfig'receiverPubKey, $action'orderConfig'hashlock, $action'orderConfig'timelock, $action'orderConfig'amount, $action'orderConfig'finalized, $action'orderConfig'partialFills, $action'orderConfig'totalFilled, $action'orderConfig'direction), $action'evmContractAddress, $action'customPayload), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive RegisterEVMBridge message
    if (op == 0x8a9b0c1d) {
        var $action'bridgeId = in_msg~load_uint(32);
        var $action'sourceChainId = in_msg~load_uint(32);
        var $action'targetChainId = in_msg~load_uint(32);
        var $action'bridgeContract = in_msg~load_msg_addr();
        var $action'bridgeFee = in_msg~load_uint(64);
        var $action'minTransferAmount = in_msg~load_uint(64);
        var $action'maxTransferAmount = in_msg~load_uint(64);
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        var ($bridgeData'bridgeId, $bridgeData'sourceChainId, $bridgeData'targetChainId, $bridgeData'bridgeContract, $bridgeData'bridgeFee, $bridgeData'minTransferAmount, $bridgeData'maxTransferAmount, $bridgeData'isActive, $bridgeData'lastUpdateTimestamp) = $EVMBridgeData$_constructor_bridgeId_sourceChainId_targetChainId_bridgeContract_bridgeFee_minTransferAmount_maxTransferAmount_isActive_lastUpdateTimestamp($action'bridgeId, $action'sourceChainId, $action'targetChainId, $action'bridgeContract, $action'bridgeFee, $action'minTransferAmount, $action'maxTransferAmount, true, 0);
        $self'evmBridges~__tact_dict_set_uint_cell(32, $action'bridgeId, $EVMBridgeData$_store_cell(($bridgeData'bridgeId, $bridgeData'sourceChainId, $bridgeData'targetChainId, $bridgeData'bridgeContract, $bridgeData'bridgeFee, $bridgeData'minTransferAmount, $bridgeData'maxTransferAmount, $bridgeData'isActive, $bridgeData'lastUpdateTimestamp), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive UpdateEVMBridge message
    if (op == 0x9b0c1d2e) {
        var $action'bridgeId = in_msg~load_uint(32);
        var $action'bridgeFee = in_msg~load_uint(64);
        var $action'minTransferAmount = in_msg~load_uint(64);
        var $action'maxTransferAmount = in_msg~load_uint(64);
        var $action'isActive = in_msg~load_int(1);
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        tuple $existingBridge = $EVMBridgeData$_load_opt(__tact_dict_get_uint_cell($self'evmBridges, 32, $action'bridgeId));
        throw_if(89, null?($existingBridge));
        var ($updatedBridge'bridgeId, $updatedBridge'sourceChainId, $updatedBridge'targetChainId, $updatedBridge'bridgeContract, $updatedBridge'bridgeFee, $updatedBridge'minTransferAmount, $updatedBridge'maxTransferAmount, $updatedBridge'isActive, $updatedBridge'lastUpdateTimestamp) = $EVMBridgeData$_constructor_bridgeId_sourceChainId_targetChainId_bridgeContract_bridgeFee_minTransferAmount_maxTransferAmount_isActive_lastUpdateTimestamp($action'bridgeId, $EVMBridgeData$_get_sourceChainId($EVMBridgeData$_not_null($existingBridge)), $EVMBridgeData$_get_targetChainId($EVMBridgeData$_not_null($existingBridge)), $EVMBridgeData$_get_bridgeContract($EVMBridgeData$_not_null($existingBridge)), $action'bridgeFee, $action'minTransferAmount, $action'maxTransferAmount, $action'isActive, 0);
        $self'evmBridges~__tact_dict_set_uint_cell(32, $action'bridgeId, $EVMBridgeData$_store_cell(($updatedBridge'bridgeId, $updatedBridge'sourceChainId, $updatedBridge'targetChainId, $updatedBridge'bridgeContract, $updatedBridge'bridgeFee, $updatedBridge'minTransferAmount, $updatedBridge'maxTransferAmount, $updatedBridge'isActive, $updatedBridge'lastUpdateTimestamp), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive RegisterEVMOracle message
    if (op == 0xc1d2e3f) {
        var $action'oracleId = in_msg~load_uint(32);
        var $action'chainId = in_msg~load_uint(32);
        var $action'oracleContract = in_msg~load_msg_addr();
        var $action'tokenAddress = in_msg~load_msg_addr();
        var $action'priceDecimals = in_msg~load_uint(8);
        var $action'heartbeatInterval = in_msg~load_uint(32);
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        var ($oracleData'oracleId, $oracleData'chainId, $oracleData'oracleContract, $oracleData'tokenAddress, $oracleData'priceDecimals, $oracleData'heartbeatInterval, $oracleData'isActive, $oracleData'lastPriceUpdate) = $EVMOracleData$_constructor_oracleId_chainId_oracleContract_tokenAddress_priceDecimals_heartbeatInterval_isActive_lastPriceUpdate($action'oracleId, $action'chainId, $action'oracleContract, $action'tokenAddress, $action'priceDecimals, $action'heartbeatInterval, true, 0);
        $self'evmOracles~__tact_dict_set_uint_cell(32, $action'oracleId, $EVMOracleData$_store_cell(($oracleData'oracleId, $oracleData'chainId, $oracleData'oracleContract, $oracleData'tokenAddress, $oracleData'priceDecimals, $oracleData'heartbeatInterval, $oracleData'isActive, $oracleData'lastPriceUpdate), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive UpdateEVMOracle message
    if (op == 0x1d2e3f4a) {
        var $action'oracleId = in_msg~load_uint(32);
        var $action'heartbeatInterval = in_msg~load_uint(32);
        var $action'isActive = in_msg~load_int(1);
        var $action'customPayload = in_msg~load_maybe_ref();
        throw_if(86, ( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        tuple $existingOracle = $EVMOracleData$_load_opt(__tact_dict_get_uint_cell($self'evmOracles, 32, $action'oracleId));
        throw_if(90, null?($existingOracle));
        var ($updatedOracle'oracleId, $updatedOracle'chainId, $updatedOracle'oracleContract, $updatedOracle'tokenAddress, $updatedOracle'priceDecimals, $updatedOracle'heartbeatInterval, $updatedOracle'isActive, $updatedOracle'lastPriceUpdate) = $EVMOracleData$_constructor_oracleId_chainId_oracleContract_tokenAddress_priceDecimals_heartbeatInterval_isActive_lastPriceUpdate($action'oracleId, $EVMOracleData$_get_chainId($EVMOracleData$_not_null($existingOracle)), $EVMOracleData$_get_oracleContract($EVMOracleData$_not_null($existingOracle)), $EVMOracleData$_get_tokenAddress($EVMOracleData$_not_null($existingOracle)), $EVMOracleData$_get_priceDecimals($EVMOracleData$_not_null($existingOracle)), $action'heartbeatInterval, $action'isActive, $EVMOracleData$_get_lastPriceUpdate($EVMOracleData$_not_null($existingOracle)));
        $self'evmOracles~__tact_dict_set_uint_cell(32, $action'oracleId, $EVMOracleData$_store_cell(($updatedOracle'oracleId, $updatedOracle'chainId, $updatedOracle'oracleContract, $updatedOracle'tokenAddress, $updatedOracle'priceDecimals, $updatedOracle'heartbeatInterval, $updatedOracle'isActive, $updatedOracle'lastPriceUpdate), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive EVMBridgeTimeout message
    if (op == 0x2e3f4a5b) {
        var $action'bridgeId = in_msg~load_uint(32);
        var $action'transactionNonce = in_msg~load_uint(64);
        var $action'customPayload = in_msg~load_maybe_ref();
        tuple $transaction = $EVMTransaction$_load_opt(__tact_dict_get_uint_cell($self'evmTransactions, 64, $action'transactionNonce));
        throw_if(112, null?($transaction));
        var ($updatedTransaction'chainId, $updatedTransaction'toContract, $updatedTransaction'functionSelector, $updatedTransaction'parameters, $updatedTransaction'gasLimit, $updatedTransaction'gasPrice, $updatedTransaction'value, $updatedTransaction'nonce, $updatedTransaction'status, $updatedTransaction'transactionHash, $updatedTransaction'blockNumber, $updatedTransaction'confirmations) = $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations($EVMTransaction$_get_chainId($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_toContract($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_functionSelector($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_parameters($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_gasLimit($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_gasPrice($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_value($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_nonce($EVMTransaction$_not_null($transaction)), 2, $EVMTransaction$_get_transactionHash($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_blockNumber($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_confirmations($EVMTransaction$_not_null($transaction)));
        $self'evmTransactions~__tact_dict_set_uint_cell(64, $action'transactionNonce, $EVMTransaction$_store_cell(($updatedTransaction'chainId, $updatedTransaction'toContract, $updatedTransaction'functionSelector, $updatedTransaction'parameters, $updatedTransaction'gasLimit, $updatedTransaction'gasPrice, $updatedTransaction'value, $updatedTransaction'nonce, $updatedTransaction'status, $updatedTransaction'transactionHash, $updatedTransaction'blockNumber, $updatedTransaction'confirmations), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive RetryEVMTransaction message
    if (op == 0x3f4a5b6c) {
        var $action'transactionNonce = in_msg~load_uint(64);
        var $action'newGasPrice = in_msg~load_uint(64);
        var $action'customPayload = in_msg~load_maybe_ref();
        tuple $transaction = $EVMTransaction$_load_opt(__tact_dict_get_uint_cell($self'evmTransactions, 64, $action'transactionNonce));
        throw_if(112, null?($transaction));
        throw_if(113, ($EVMTransaction$_get_status($EVMTransaction$_not_null($transaction)) != 2));
        var ($retryTransaction'chainId, $retryTransaction'toContract, $retryTransaction'functionSelector, $retryTransaction'parameters, $retryTransaction'gasLimit, $retryTransaction'gasPrice, $retryTransaction'value, $retryTransaction'nonce, $retryTransaction'status, $retryTransaction'transactionHash, $retryTransaction'blockNumber, $retryTransaction'confirmations) = $EVMTransaction$_constructor_chainId_toContract_functionSelector_parameters_gasLimit_gasPrice_value_nonce_status_transactionHash_blockNumber_confirmations($EVMTransaction$_get_chainId($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_toContract($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_functionSelector($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_parameters($EVMTransaction$_not_null($transaction)), $EVMTransaction$_get_gasLimit($EVMTransaction$_not_null($transaction)), $action'newGasPrice, $EVMTransaction$_get_value($EVMTransaction$_not_null($transaction)), $self'evmTransactionNonce, 0, $Builder$_fun_endCell($global_beginCell()), 0, 0);
        $self'evmTransactionNonce = ($self'evmTransactionNonce + 1);
        $self'evmTransactions~__tact_dict_set_uint_cell(64, $retryTransaction'nonce, $EVMTransaction$_store_cell(($retryTransaction'chainId, $retryTransaction'toContract, $retryTransaction'functionSelector, $retryTransaction'parameters, $retryTransaction'gasLimit, $retryTransaction'gasPrice, $retryTransaction'value, $retryTransaction'nonce, $retryTransaction'status, $retryTransaction'transactionHash, $retryTransaction'blockNumber, $retryTransaction'confirmations), begin_cell()));
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_sendEVMTransactionRetryToBridge($EVMTransaction$_tensor_cast(($retryTransaction'chainId, $retryTransaction'toContract, $retryTransaction'functionSelector, $retryTransaction'parameters, $retryTransaction'gasLimit, $retryTransaction'gasPrice, $retryTransaction'value, $retryTransaction'nonce, $retryTransaction'status, $retryTransaction'transactionHash, $retryTransaction'blockNumber, $retryTransaction'confirmations)));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive Deploy message
    if (op == 0x946a98b6) {
        var $deploy'queryId = in_msg~load_uint(64);
        ($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees)~$TonFusion$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $global_cashback(__tact_context_get_sender());
        $TonFusion$_contract_store(($self'owner, $self'escrowLock, $self'escrowOrder, $self'jettons, $self'jettonAccount, $self'whiteLists, $self'relayers, $self'escrowContracts, $self'totalOrders, $self'totalVolume, $self'totalResolves, $self'evmChainConfigs, $self'evmTransactions, $self'evmBridges, $self'evmOracles, $self'evmTransactionNonce, $self'evmBridgeFees));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}